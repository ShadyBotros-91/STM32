
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08000f70  08000f70  00010f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800105c  0800105c  0001105c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001060  08001060  00011060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          000001bc  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200001d0  200001d0  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000295b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000970  00000000  00000000  0002299f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000220  00000000  00000000  00023310  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c0  00000000  00000000  00023530  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000132b  00000000  00000000  000236f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000010fc  00000000  00000000  00024a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00025b17  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000614  00000000  00000000  00025b94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000f58 	.word	0x08000f58

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08000f58 	.word	0x08000f58

080001ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	da0b      	bge.n	8000218 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000200:	490d      	ldr	r1, [pc, #52]	; (8000238 <NVIC_SetPriority+0x4c>)
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 030f 	and.w	r3, r3, #15
 8000208:	3b04      	subs	r3, #4
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000216:	e009      	b.n	800022c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000218:	4908      	ldr	r1, [pc, #32]	; (800023c <NVIC_SetPriority+0x50>)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	e000ed00 	.word	0xe000ed00
 800023c:	e000e100 	.word	0xe000e100

08000240 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000250:	d301      	bcc.n	8000256 <SysTick_Config+0x16>
 8000252:	2301      	movs	r3, #1
 8000254:	e00f      	b.n	8000276 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <SysTick_Config+0x40>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3b01      	subs	r3, #1
 800025c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800025e:	210f      	movs	r1, #15
 8000260:	f04f 30ff 	mov.w	r0, #4294967295
 8000264:	f7ff ffc2 	bl	80001ec <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <SysTick_Config+0x40>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <SysTick_Config+0x40>)
 8000270:	2207      	movs	r2, #7
 8000272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	e000e010 	.word	0xe000e010

08000284 <SysTick_Init>:
#include "SysTick.h"


void SysTick_Init(void)

{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	uint32_t returnCode;

	/*Update clock configuration*/
	SystemCoreClockUpdate();
 800028a:	f000 fd49 	bl	8000d20 <SystemCoreClockUpdate>

	/*check clock configuration*/
	if(SystemCoreClock != (uint32_t) 180000000)
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <SysTick_Init+0x44>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <SysTick_Init+0x48>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d000      	beq.n	800029a <SysTick_Init+0x16>
	{
		/*clock configuration is not OK*/
		while(1);
 8000298:	e7fe      	b.n	8000298 <SysTick_Init+0x14>
		/*clock configuration is OK*/
		//SysTick_IncrementTicks_cb();
	}

	/* Configure SysTick to generate an interrupt every millisecond*/
	returnCode = SysTick_Config(SystemCoreClock / 1000);
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <SysTick_Init+0x44>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <SysTick_Init+0x4c>)
 80002a0:	fba2 2303 	umull	r2, r3, r2, r3
 80002a4:	099b      	lsrs	r3, r3, #6
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffca 	bl	8000240 <SysTick_Config>
 80002ac:	6078      	str	r0, [r7, #4]

	/*check return code for errors */

	if(returnCode != 0)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d000      	beq.n	80002b6 <SysTick_Init+0x32>
	{
		/*SysTick Configuration failed*/
		while (1);
 80002b4:	e7fe      	b.n	80002b4 <SysTick_Init+0x30>
	{
		/*SysTick Configuration OK*/
		//SysTick_IncrementTicks_cb();
	}

	NVIC_SetPriority(SysTick_IRQn , 0);
 80002b6:	2100      	movs	r1, #0
 80002b8:	f04f 30ff 	mov.w	r0, #4294967295
 80002bc:	f7ff ff96 	bl	80001ec <NVIC_SetPriority>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000000 	.word	0x20000000
 80002cc:	0aba9500 	.word	0x0aba9500
 80002d0:	10624dd3 	.word	0x10624dd3

080002d4 <SysTick_Delay>:
	return (SysTickCounter);

}

void SysTick_Delay (uint32_t wait_time_ms)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]

	/*store start tick*/
	uint32_t startTick = SysTickCounter;
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <SysTick_Delay+0x2c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	60fb      	str	r3, [r7, #12]
	//SysTickCounter ++;
	/*Loop until timeout*/
	while((SysTickCounter - startTick) < wait_time_ms);
 80002e2:	bf00      	nop
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <SysTick_Delay+0x2c>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	1ad2      	subs	r2, r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d3f8      	bcc.n	80002e4 <SysTick_Delay+0x10>

}
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	200001cc 	.word	0x200001cc

08000304 <GPIO_init_LED>:
 */

#include "gpio.h"

void GPIO_init_LED(Led_Type led)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	switch (led)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d002      	beq.n	800031a <GPIO_init_LED+0x16>
 8000314:	2b02      	cmp	r3, #2
 8000316:	d033      	beq.n	8000380 <GPIO_init_LED+0x7c>
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR14);


			break;
	default:
		break;
 8000318:	e065      	b.n	80003e6 <GPIO_init_LED+0xe2>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 800031a:	4a36      	ldr	r2, [pc, #216]	; (80003f4 <GPIO_init_LED+0xf0>)
 800031c:	4b35      	ldr	r3, [pc, #212]	; (80003f4 <GPIO_init_LED+0xf0>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOG->MODER |= GPIO_MODER_MODER13_0;
 8000326:	4a34      	ldr	r2, [pc, #208]	; (80003f8 <GPIO_init_LED+0xf4>)
 8000328:	4b33      	ldr	r3, [pc, #204]	; (80003f8 <GPIO_init_LED+0xf4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000330:	6013      	str	r3, [r2, #0]
		GPIOG->OTYPER &= ~(GPIO_OTYPER_OT_13);
 8000332:	4a31      	ldr	r2, [pc, #196]	; (80003f8 <GPIO_init_LED+0xf4>)
 8000334:	4b30      	ldr	r3, [pc, #192]	; (80003f8 <GPIO_init_LED+0xf4>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800033c:	6053      	str	r3, [r2, #4]
		GPIOG->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR13_0 | GPIO_OSPEEDER_OSPEEDR13_1);
 800033e:	4a2e      	ldr	r2, [pc, #184]	; (80003f8 <GPIO_init_LED+0xf4>)
 8000340:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <GPIO_init_LED+0xf4>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000348:	6093      	str	r3, [r2, #8]
		RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 800034a:	4a2a      	ldr	r2, [pc, #168]	; (80003f4 <GPIO_init_LED+0xf0>)
 800034c:	4b29      	ldr	r3, [pc, #164]	; (80003f4 <GPIO_init_LED+0xf0>)
 800034e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000354:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
 8000356:	4a29      	ldr	r2, [pc, #164]	; (80003fc <GPIO_init_LED+0xf8>)
 8000358:	4b28      	ldr	r3, [pc, #160]	; (80003fc <GPIO_init_LED+0xf8>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6213      	str	r3, [r2, #32]
		while ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 8000362:	bf00      	nop
 8000364:	4b25      	ldr	r3, [pc, #148]	; (80003fc <GPIO_init_LED+0xf8>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800036c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000370:	d1f8      	bne.n	8000364 <GPIO_init_LED+0x60>
		GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR13);
 8000372:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <GPIO_init_LED+0xf4>)
 8000374:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <GPIO_init_LED+0xf4>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800037c:	60d3      	str	r3, [r2, #12]
		break;
 800037e:	e032      	b.n	80003e6 <GPIO_init_LED+0xe2>
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000380:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <GPIO_init_LED+0xf0>)
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <GPIO_init_LED+0xf0>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG->MODER |= GPIO_MODER_MODER14_0;
 800038c:	4a1a      	ldr	r2, [pc, #104]	; (80003f8 <GPIO_init_LED+0xf4>)
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <GPIO_init_LED+0xf4>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000396:	6013      	str	r3, [r2, #0]
			GPIOG->OTYPER &= ~(GPIO_OTYPER_OT_14);
 8000398:	4a17      	ldr	r2, [pc, #92]	; (80003f8 <GPIO_init_LED+0xf4>)
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <GPIO_init_LED+0xf4>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003a2:	6053      	str	r3, [r2, #4]
			GPIOG->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR14_0 | GPIO_OSPEEDER_OSPEEDR14_1);
 80003a4:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <GPIO_init_LED+0xf4>)
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <GPIO_init_LED+0xf4>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80003ae:	6093      	str	r3, [r2, #8]
			RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 80003b0:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <GPIO_init_LED+0xf0>)
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <GPIO_init_LED+0xf0>)
 80003b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ba:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
 80003bc:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <GPIO_init_LED+0xf8>)
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <GPIO_init_LED+0xf8>)
 80003c0:	6a1b      	ldr	r3, [r3, #32]
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6213      	str	r3, [r2, #32]
			while ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 80003c8:	bf00      	nop
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <GPIO_init_LED+0xf8>)
 80003cc:	6a1b      	ldr	r3, [r3, #32]
 80003ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003d6:	d1f8      	bne.n	80003ca <GPIO_init_LED+0xc6>
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR14);
 80003d8:	4a07      	ldr	r2, [pc, #28]	; (80003f8 <GPIO_init_LED+0xf4>)
 80003da:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <GPIO_init_LED+0xf4>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80003e2:	60d3      	str	r3, [r2, #12]
			break;
 80003e4:	bf00      	nop
	}


}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40021800 	.word	0x40021800
 80003fc:	40013800 	.word	0x40013800

08000400 <GPIO_TurnON_LED>:
void GPIO_TurnON_LED(Led_Type led)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	switch (led)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d00e      	beq.n	800042e <GPIO_TurnON_LED+0x2e>
 8000410:	2b02      	cmp	r3, #2
 8000412:	d007      	beq.n	8000424 <GPIO_TurnON_LED+0x24>
 8000414:	2b00      	cmp	r3, #0
 8000416:	d000      	beq.n	800041a <GPIO_TurnON_LED+0x1a>
	case EVAL_GREEN_LED_BITBAND:
				GREEN_LED_BITBAND = 1;
				break;

	default:
		break;
 8000418:	e00d      	b.n	8000436 <GPIO_TurnON_LED+0x36>
		GPIOG->BSRRL = GPIO_BSRR_BS_13;
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <GPIO_TurnON_LED+0x44>)
 800041c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000420:	831a      	strh	r2, [r3, #24]
		break;
 8000422:	e008      	b.n	8000436 <GPIO_TurnON_LED+0x36>
		GPIOG->BSRRL = GPIO_BSRR_BS_14;
 8000424:	4b07      	ldr	r3, [pc, #28]	; (8000444 <GPIO_TurnON_LED+0x44>)
 8000426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800042a:	831a      	strh	r2, [r3, #24]
		break;
 800042c:	e003      	b.n	8000436 <GPIO_TurnON_LED+0x36>
				GREEN_LED_BITBAND = 1;
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <GPIO_TurnON_LED+0x48>)
 8000430:	2201      	movs	r2, #1
 8000432:	601a      	str	r2, [r3, #0]
				break;
 8000434:	bf00      	nop

	}

}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021800 	.word	0x40021800
 8000448:	424302b4 	.word	0x424302b4

0800044c <GPIO_TurnOFF_LED>:
void GPIO_TurnOFF_LED(Led_Type led)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
	switch (led)
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d00e      	beq.n	800047a <GPIO_TurnOFF_LED+0x2e>
 800045c:	2b02      	cmp	r3, #2
 800045e:	d007      	beq.n	8000470 <GPIO_TurnOFF_LED+0x24>
 8000460:	2b00      	cmp	r3, #0
 8000462:	d000      	beq.n	8000466 <GPIO_TurnOFF_LED+0x1a>
		case EVAL_GREEN_LED_BITBAND:
			GREEN_LED_BITBAND = 0;
			break;

		default:
			break;
 8000464:	e00d      	b.n	8000482 <GPIO_TurnOFF_LED+0x36>
			GPIOG->BSRRH = GPIO_BSRR_BS_13;
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <GPIO_TurnOFF_LED+0x44>)
 8000468:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800046c:	835a      	strh	r2, [r3, #26]
			break;
 800046e:	e008      	b.n	8000482 <GPIO_TurnOFF_LED+0x36>
			GPIOG->BSRRH = GPIO_BSRR_BS_14;
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <GPIO_TurnOFF_LED+0x44>)
 8000472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000476:	835a      	strh	r2, [r3, #26]
			break;
 8000478:	e003      	b.n	8000482 <GPIO_TurnOFF_LED+0x36>
			GREEN_LED_BITBAND = 0;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <GPIO_TurnOFF_LED+0x48>)
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
			break;
 8000480:	bf00      	nop

		}

}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40021800 	.word	0x40021800
 8000494:	424302b4 	.word	0x424302b4

08000498 <NVIC_SetPriorityGrouping>:
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f003 0307 	and.w	r3, r3, #7
 80004a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <NVIC_SetPriorityGrouping+0x44>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80004c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004ca:	4a04      	ldr	r2, [pc, #16]	; (80004dc <NVIC_SetPriorityGrouping+0x44>)
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	60d3      	str	r3, [r2, #12]
}
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <NVIC_EnableIRQ>:
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80004ea:	4909      	ldr	r1, [pc, #36]	; (8000510 <NVIC_EnableIRQ+0x30>)
 80004ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f0:	095b      	lsrs	r3, r3, #5
 80004f2:	79fa      	ldrb	r2, [r7, #7]
 80004f4:	f002 021f 	and.w	r2, r2, #31
 80004f8:	2001      	movs	r0, #1
 80004fa:	fa00 f202 	lsl.w	r2, r0, r2
 80004fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000e100 	.word	0xe000e100

08000514 <NVIC_SetPriority>:
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000524:	2b00      	cmp	r3, #0
 8000526:	da0b      	bge.n	8000540 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000528:	490d      	ldr	r1, [pc, #52]	; (8000560 <NVIC_SetPriority+0x4c>)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 030f 	and.w	r3, r3, #15
 8000530:	3b04      	subs	r3, #4
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	440b      	add	r3, r1
 800053c:	761a      	strb	r2, [r3, #24]
}
 800053e:	e009      	b.n	8000554 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000540:	4908      	ldr	r1, [pc, #32]	; (8000564 <NVIC_SetPriority+0x50>)
 8000542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	0112      	lsls	r2, r2, #4
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	440b      	add	r3, r1
 8000550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000ed00 	.word	0xe000ed00
 8000564:	e000e100 	.word	0xe000e100

08000568 <NVIC_Init>:


#include "nvic.h"

void NVIC_Init()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	/* Set Priority group to 3
	 * bits[3:0] are the sub-priority
	 * bits[7:4] are the pre-empt priority (0-15)
	 */

	NVIC_SetPriorityGrouping(3);
 800056c:	2003      	movs	r0, #3
 800056e:	f7ff ff93 	bl	8000498 <NVIC_SetPriorityGrouping>


	/*Set priority levels*/

	NVIC_SetPriority(SysTick_IRQn , 0);
 8000572:	2100      	movs	r1, #0
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	f7ff ffcc 	bl	8000514 <NVIC_SetPriority>
	NVIC_SetPriority(EXTI0_IRQn , 1);
 800057c:	2101      	movs	r1, #1
 800057e:	2006      	movs	r0, #6
 8000580:	f7ff ffc8 	bl	8000514 <NVIC_SetPriority>
	NVIC_SetPriority(DMA2_Stream0_IRQn ,1);
 8000584:	2101      	movs	r1, #1
 8000586:	2038      	movs	r0, #56	; 0x38
 8000588:	f7ff ffc4 	bl	8000514 <NVIC_SetPriority>


	/*Enable interrupts at NVIC*/

	NVIC_EnableIRQ(EXTI0_IRQn);
 800058c:	2006      	movs	r0, #6
 800058e:	f7ff ffa7 	bl	80004e0 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000592:	2038      	movs	r0, #56	; 0x38
 8000594:	f7ff ffa4 	bl	80004e0 <NVIC_EnableIRQ>


}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <strTransmit>:


/*string transmit*/

static void strTransmit(const char *str , uint8_t size)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]

	/*check null pointers*/
	if(NULL != str)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d018      	beq.n	80005e0 <strTransmit+0x44>
	{
		/*send all string characters*/
		for(int idx = 0 ; idx < size ; idx++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	e011      	b.n	80005d8 <strTransmit+0x3c>
		{
			/*check USART status register*/
			while(!(USART1->SR & USART_SR_TXE))
 80005b4:	bf00      	nop
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <strTransmit+0x50>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0f8      	beq.n	80005b6 <strTransmit+0x1a>
			{
				/*wait for transmission buffer empty flag*/
			}

			/*write data into transmit data register*/
			USART1->DR = str[idx];
 80005c4:	4909      	ldr	r1, [pc, #36]	; (80005ec <strTransmit+0x50>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	808b      	strh	r3, [r1, #4]
		for(int idx = 0 ; idx < size ; idx++)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	3301      	adds	r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	78fa      	ldrb	r2, [r7, #3]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dce9      	bgt.n	80005b4 <strTransmit+0x18>
	{

		/*Null pointers do nothing*/
	}

}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40011000 	.word	0x40011000

080005f0 <strReceive>:


/* string receive*/

static void strReceive(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0

	/*current reception index*/
	static int RxIndex = 0;

	/*check for end-of-line condition*/
	if(RxChar == '\0')
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <strReceive+0x90>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d127      	bne.n	800064e <strReceive+0x5e>
	{

		/*check if string data was received before */
		if(RxIndex != 0)
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <strReceive+0x94>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d035      	beq.n	8000672 <strReceive+0x82>
		{

			/*copy string data from local buffer*/
			for(int idx = 0 ; idx < RxIndex ; idx++)
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	e00b      	b.n	8000624 <strReceive+0x34>
			{

				RxBuffer[idx] = RxLocalBuffer[idx];
 800060c:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <strReceive+0x98>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	7819      	ldrb	r1, [r3, #0]
 8000614:	4a1d      	ldr	r2, [pc, #116]	; (800068c <strReceive+0x9c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	460a      	mov	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
			for(int idx = 0 ; idx < RxIndex ; idx++)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3301      	adds	r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <strReceive+0x94>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	dbee      	blt.n	800060c <strReceive+0x1c>

			}

			/*Add terminating NULL at the end*/
			RxBuffer[RxIndex] = 0;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <strReceive+0x94>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a16      	ldr	r2, [pc, #88]	; (800068c <strReceive+0x9c>)
 8000634:	2100      	movs	r1, #0
 8000636:	54d1      	strb	r1, [r2, r3]

			/*Set message length*/
			RxMessageLength = RxIndex +1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <strReceive+0x94>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	3301      	adds	r3, #1
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <strReceive+0xa0>)
 8000644:	701a      	strb	r2, [r3, #0]

			/*Reset current Index*/
			RxIndex = 0;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <strReceive+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
		RxLocalBuffer[RxIndex]  =RxChar;

		/*Increment current index for the next char reception*/
		RxIndex ++;
	}
}
 800064c:	e011      	b.n	8000672 <strReceive+0x82>
		if(MAX_BUFFER_LENGTH == RxIndex)
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <strReceive+0x94>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2bc8      	cmp	r3, #200	; 0xc8
 8000654:	d102      	bne.n	800065c <strReceive+0x6c>
			RxIndex = 0;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <strReceive+0x94>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
		RxLocalBuffer[RxIndex]  =RxChar;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <strReceive+0x94>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <strReceive+0x90>)
 8000662:	7811      	ldrb	r1, [r2, #0]
 8000664:	4a08      	ldr	r2, [pc, #32]	; (8000688 <strReceive+0x98>)
 8000666:	54d1      	strb	r1, [r2, r3]
		RxIndex ++;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <strReceive+0x94>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <strReceive+0x94>)
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000032 	.word	0x20000032
 8000684:	20000100 	.word	0x20000100
 8000688:	20000104 	.word	0x20000104
 800068c:	20000034 	.word	0x20000034
 8000690:	200000fd 	.word	0x200000fd

08000694 <strCmp>:



static strcmpReturnType strCmp(const char *str1, const char *str2, const uint8_t size)
{
 8000694:	b480      	push	{r7}
 8000696:	b087      	sub	sp, #28
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]

	/*compare status*/

	strcmpReturnType cmpStatus = STR_EQUAL;
 80006a2:	2301      	movs	r3, #1
 80006a4:	75fb      	strb	r3, [r7, #23]

	/*check null pointers*/

	if((NULL != str1) && (NULL != str2))
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d018      	beq.n	80006de <strCmp+0x4a>
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d015      	beq.n	80006de <strCmp+0x4a>
	{

		/*start comparing*/

		for(int idx = 0 ; idx < size ; idx ++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	e00e      	b.n	80006d6 <strCmp+0x42>
		{
			/*when not equal set the return status*/
			if(str1[idx] != str2[idx])
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	440b      	add	r3, r1
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d001      	beq.n	80006d0 <strCmp+0x3c>
			{
				cmpStatus = STR_NOT_EQUAL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	75fb      	strb	r3, [r7, #23]
		for(int idx = 0 ; idx < size ; idx ++)
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	3301      	adds	r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	79fa      	ldrb	r2, [r7, #7]
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	429a      	cmp	r2, r3
 80006dc:	dcec      	bgt.n	80006b8 <strCmp+0x24>
	else
	{
		/*Null pointers , do nothing */
	}

	return cmpStatus;
 80006de:	7dfb      	ldrb	r3, [r7, #23]

}
 80006e0:	4618      	mov	r0, r3
 80006e2:	371c      	adds	r7, #28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <USART1_GPIO_Config>:

/*Configure GPIO with AF7 , USART1 connected to APB2 with 90 MHz clock
 * PA9 -> USART1_TX , PA10 -> USART1_RX*/

void USART1_GPIO_Config(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

	/*Enable port A clock*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80006f0:	4a20      	ldr	r2, [pc, #128]	; (8000774 <USART1_GPIO_Config+0x88>)
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <USART1_GPIO_Config+0x88>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6313      	str	r3, [r2, #48]	; 0x30

	/*select alternate function mode*/
	GPIOA->MODER &= ~(GPIO_MODER_MODER9 | GPIO_MODER_MODER10);
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <USART1_GPIO_Config+0x8c>)
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000706:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (GPIO_MODER_MODER9_1 | GPIO_MODER_MODER10_1);
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <USART1_GPIO_Config+0x8c>)
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <USART1_GPIO_Config+0x8c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000712:	6013      	str	r3, [r2, #0]

	/*select output type push-pull for Tx(PA9)*/
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_9);
 8000714:	4a18      	ldr	r2, [pc, #96]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800071e:	6053      	str	r3, [r2, #4]

	/*select output speed medium for Tx(PA9)*/
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR9);
 8000720:	4a15      	ldr	r2, [pc, #84]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800072a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=  GPIO_OSPEEDER_OSPEEDR9_0;
 800072c:	4a12      	ldr	r2, [pc, #72]	; (8000778 <USART1_GPIO_Config+0x8c>)
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000736:	6093      	str	r3, [r2, #8]

	/*select pull-up*/
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR9 | GPIO_PUPDR_PUPDR10);
 8000738:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <USART1_GPIO_Config+0x8c>)
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <USART1_GPIO_Config+0x8c>)
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000742:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (GPIO_PUPDR_PUPDR9_0 | GPIO_PUPDR_PUPDR10_0);
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 800074e:	60d3      	str	r3, [r2, #12]

	/*select AF7*/
	GPIOA->AFR[1] &= ~(GPIO_AFRH_AFRH9 | GPIO_AFRH_AFRH10);
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800075a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=  (GPIO_AFRH_AFRH9_AF7 | GPIO_AFRH_AFRH10_AF7);
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <USART1_GPIO_Config+0x8c>)
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <USART1_GPIO_Config+0x8c>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000766:	6253      	str	r3, [r2, #36]	; 0x24


}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40020000 	.word	0x40020000

0800077c <USART1_Init>:


/*Configure USART1 for ST virtual COM port (VCP*/

void USART1_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

	/*Enable USART1 clock*/
	RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <USART1_Init+0x7c>)
 8000782:	2210      	movs	r2, #16
 8000784:	645a      	str	r2, [r3, #68]	; 0x44

	/*select over-sampling by 16 mode*/
	USART1->CR1 &= ~USART_CR1_OVER8;
 8000786:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <USART1_Init+0x80>)
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <USART1_Init+0x80>)
 800078a:	899b      	ldrh	r3, [r3, #12]
 800078c:	b29b      	uxth	r3, r3
 800078e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000792:	b29b      	uxth	r3, r3
 8000794:	8193      	strh	r3, [r2, #12]

	/*select one sample bit method*/
	USART1->CR3 |= USART_CR3_ONEBIT;
 8000796:	4a19      	ldr	r2, [pc, #100]	; (80007fc <USART1_Init+0x80>)
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <USART1_Init+0x80>)
 800079a:	8a9b      	ldrh	r3, [r3, #20]
 800079c:	b29b      	uxth	r3, r3
 800079e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	8293      	strh	r3, [r2, #20]

	/*select 1 start bit , 9 Data bits, n Stop bit*/
	USART1->CR1 |= USART_CR1_M;
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <USART1_Init+0x80>)
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <USART1_Init+0x80>)
 80007aa:	899b      	ldrh	r3, [r3, #12]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	8193      	strh	r3, [r2, #12]

	/*select 1 stop bit*/
	USART1->CR2 &= ~USART_CR2_STOP;
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <USART1_Init+0x80>)
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <USART1_Init+0x80>)
 80007ba:	8a1b      	ldrh	r3, [r3, #16]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	8213      	strh	r3, [r2, #16]

	/*Enable parity control*/
	USART1->CR1 |= USART_CR1_PCE;
 80007c6:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <USART1_Init+0x80>)
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <USART1_Init+0x80>)
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	8193      	strh	r3, [r2, #12]

	/*select odd parity*/
	USART1->CR1 |= USART_CR1_PS;
 80007d6:	4a09      	ldr	r2, [pc, #36]	; (80007fc <USART1_Init+0x80>)
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <USART1_Init+0x80>)
 80007da:	899b      	ldrh	r3, [r3, #12]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	8193      	strh	r3, [r2, #12]
	 * DIV_Fraction = 16 * 0.82 = 13.12 = 13 = 0xD
	 * DIV_Mantissa = 48 = 0x30
	 *
	 * BRR = 0x30D*/

	USART1->BRR = 0x30D;
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <USART1_Init+0x80>)
 80007e8:	f240 320d 	movw	r2, #781	; 0x30d
 80007ec:	811a      	strh	r2, [r3, #8]


}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40011000 	.word	0x40011000

08000800 <USART1_Enable>:


/*Enable USART1 transmitter and receiver*/

void USART1_Enable(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

	/*Enable USART*/
	USART1->CR1 |= USART_CR1_UE;
 8000804:	4a16      	ldr	r2, [pc, #88]	; (8000860 <USART1_Enable+0x60>)
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <USART1_Enable+0x60>)
 8000808:	899b      	ldrh	r3, [r3, #12]
 800080a:	b29b      	uxth	r3, r3
 800080c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000810:	b29b      	uxth	r3, r3
 8000812:	8193      	strh	r3, [r2, #12]

	/*Enable transmitter*/
	USART1->CR1 |= USART_CR1_TE;
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <USART1_Enable+0x60>)
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <USART1_Enable+0x60>)
 8000818:	899b      	ldrh	r3, [r3, #12]
 800081a:	b29b      	uxth	r3, r3
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	b29b      	uxth	r3, r3
 8000822:	8193      	strh	r3, [r2, #12]

	/*Enable receiver*/
	USART1->CR1 |= USART_CR1_RE;
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <USART1_Enable+0x60>)
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <USART1_Enable+0x60>)
 8000828:	899b      	ldrh	r3, [r3, #12]
 800082a:	b29b      	uxth	r3, r3
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	b29b      	uxth	r3, r3
 8000832:	8193      	strh	r3, [r2, #12]

	/*Enable reception buffer not empty flag interrupt*/
	USART1->CR1 |= USART_CR1_RXNEIE;
 8000834:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <USART1_Enable+0x60>)
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <USART1_Enable+0x60>)
 8000838:	899b      	ldrh	r3, [r3, #12]
 800083a:	b29b      	uxth	r3, r3
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	b29b      	uxth	r3, r3
 8000842:	8193      	strh	r3, [r2, #12]

	/*Enable parity error interrupt*/
	USART1->CR1 |= USART_CR1_PEIE;
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <USART1_Enable+0x60>)
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <USART1_Enable+0x60>)
 8000848:	899b      	ldrh	r3, [r3, #12]
 800084a:	b29b      	uxth	r3, r3
 800084c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000850:	b29b      	uxth	r3, r3
 8000852:	8193      	strh	r3, [r2, #12]

}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40011000 	.word	0x40011000

08000864 <USART1_Process>:


/*Sending and receiving data*/

void USART1_Process(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

	/*check error status*/

	switch (currentIRQStatus)
 800086a:	4b70      	ldr	r3, [pc, #448]	; (8000a2c <USART1_Process+0x1c8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d00f      	beq.n	8000892 <USART1_Process+0x2e>
 8000872:	2b02      	cmp	r3, #2
 8000874:	d002      	beq.n	800087c <USART1_Process+0x18>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d011      	beq.n	800089e <USART1_Process+0x3a>

	  case USART1_NO_IRQ:
		  break;

	  default:
		  break;
 800087a:	e011      	b.n	80008a0 <USART1_Process+0x3c>
		strTransmit(parity_error, sizeof(parity_error));
 800087c:	210d      	movs	r1, #13
 800087e:	486c      	ldr	r0, [pc, #432]	; (8000a30 <USART1_Process+0x1cc>)
 8000880:	f7ff fe8c 	bl	800059c <strTransmit>
		currentState = USART1_IDLE;
 8000884:	4b6b      	ldr	r3, [pc, #428]	; (8000a34 <USART1_Process+0x1d0>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
		currentIRQStatus = USART1_NO_IRQ;
 800088a:	4b68      	ldr	r3, [pc, #416]	; (8000a2c <USART1_Process+0x1c8>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
		break;
 8000890:	e006      	b.n	80008a0 <USART1_Process+0x3c>
		  strReceive();
 8000892:	f7ff fead 	bl	80005f0 <strReceive>
		  currentIRQStatus = USART1_NO_IRQ;
 8000896:	4b65      	ldr	r3, [pc, #404]	; (8000a2c <USART1_Process+0x1c8>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
		  break;
 800089c:	e000      	b.n	80008a0 <USART1_Process+0x3c>
		  break;
 800089e:	bf00      	nop

	}

	/*check current USART state*/

	switch (currentState)
 80008a0:	4b64      	ldr	r3, [pc, #400]	; (8000a34 <USART1_Process+0x1d0>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	f200 80b5 	bhi.w	8000a14 <USART1_Process+0x1b0>
 80008aa:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <USART1_Process+0x4c>)
 80008ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b0:	080008c5 	.word	0x080008c5
 80008b4:	080008d5 	.word	0x080008d5
 80008b8:	080008ed 	.word	0x080008ed
 80008bc:	080008fd 	.word	0x080008fd
 80008c0:	08000939 	.word	0x08000939
	{
	  case USART1_IDLE:
		  /*Transmit data */
		  strTransmit(hello_world , sizeof(hello_world));
 80008c4:	210d      	movs	r1, #13
 80008c6:	485c      	ldr	r0, [pc, #368]	; (8000a38 <USART1_Process+0x1d4>)
 80008c8:	f7ff fe68 	bl	800059c <strTransmit>

		  /*Go to next state */
		  currentState = USART1_WAIT_FOR_RESPONSE;
 80008cc:	4b59      	ldr	r3, [pc, #356]	; (8000a34 <USART1_Process+0x1d0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
		  break;
 80008d2:	e0a6      	b.n	8000a22 <USART1_Process+0x1be>

	  case USART1_WAIT_FOR_RESPONSE:
		  /*check if new message received*/
		  if(0 != RxMessageLength)
 80008d4:	4b59      	ldr	r3, [pc, #356]	; (8000a3c <USART1_Process+0x1d8>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	f000 809d 	beq.w	8000a18 <USART1_Process+0x1b4>
		  {
			  /*Reset message length*/
			  RxMessageLength = 0;
 80008de:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <USART1_Process+0x1d8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]

			  /*Go to next state*/
			  currentState = USART1_ASK_FOR_NAME;
 80008e4:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <USART1_Process+0x1d0>)
 80008e6:	2202      	movs	r2, #2
 80008e8:	701a      	strb	r2, [r3, #0]
		  else
		  {
			  /*Nothing received yet*/

		  }
		  break;
 80008ea:	e095      	b.n	8000a18 <USART1_Process+0x1b4>

	  case USART1_ASK_FOR_NAME:

		  /*Transmit data*/

		  strTransmit(ask_for_name , sizeof(ask_for_name));
 80008ec:	2114      	movs	r1, #20
 80008ee:	4854      	ldr	r0, [pc, #336]	; (8000a40 <USART1_Process+0x1dc>)
 80008f0:	f7ff fe54 	bl	800059c <strTransmit>

		  /*Go to next state */
		  currentState = USART1_WAIT_FOR_NAME;
 80008f4:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <USART1_Process+0x1d0>)
 80008f6:	2203      	movs	r2, #3
 80008f8:	701a      	strb	r2, [r3, #0]
		  break;
 80008fa:	e092      	b.n	8000a22 <USART1_Process+0x1be>

	  case USART1_WAIT_FOR_NAME:

		  /*check if new message received*/

		  if(0 != RxMessageLength)
 80008fc:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <USART1_Process+0x1d8>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	f000 808b 	beq.w	8000a1c <USART1_Process+0x1b8>
		  {

			  /*Transmit data*/
			  strTransmit(hi, sizeof(hi));
 8000906:	2106      	movs	r1, #6
 8000908:	484e      	ldr	r0, [pc, #312]	; (8000a44 <USART1_Process+0x1e0>)
 800090a:	f7ff fe47 	bl	800059c <strTransmit>
			  strTransmit(RxBuffer, RxMessageLength);
 800090e:	4b4b      	ldr	r3, [pc, #300]	; (8000a3c <USART1_Process+0x1d8>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	484c      	ldr	r0, [pc, #304]	; (8000a48 <USART1_Process+0x1e4>)
 8000916:	f7ff fe41 	bl	800059c <strTransmit>
			  strTransmit(ask_for_command , sizeof(ask_for_command));
 800091a:	2115      	movs	r1, #21
 800091c:	484b      	ldr	r0, [pc, #300]	; (8000a4c <USART1_Process+0x1e8>)
 800091e:	f7ff fe3d 	bl	800059c <strTransmit>
			  strTransmit(ask_for_command_ex, sizeof(ask_for_command_ex));
 8000922:	2134      	movs	r1, #52	; 0x34
 8000924:	484a      	ldr	r0, [pc, #296]	; (8000a50 <USART1_Process+0x1ec>)
 8000926:	f7ff fe39 	bl	800059c <strTransmit>


			  /*Reset message length*/

			  RxMessageLength = 0;
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <USART1_Process+0x1d8>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]

			  /*Go to next state*/

			  currentState = USART1_WAIT_FOR_COMMAND;
 8000930:	4b40      	ldr	r3, [pc, #256]	; (8000a34 <USART1_Process+0x1d0>)
 8000932:	2204      	movs	r2, #4
 8000934:	701a      	strb	r2, [r3, #0]
		  {
			  /*Nothing received yet*/

		  }

		  break;
 8000936:	e071      	b.n	8000a1c <USART1_Process+0x1b8>

	  case USART1_WAIT_FOR_COMMAND:

		  /*check if new message received*/

		  if( 0 != RxMessageLength)
 8000938:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <USART1_Process+0x1d8>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d06f      	beq.n	8000a20 <USART1_Process+0x1bc>
		  {

			  /*Reset message length*/
			  RxMessageLength = 0;
 8000940:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <USART1_Process+0x1d8>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]

			  /*String compare results*/

			  strcmpReturnType isMatch_01 = STR_NOT_EQUAL;
 8000946:	2300      	movs	r3, #0
 8000948:	713b      	strb	r3, [r7, #4]
			  strcmpReturnType isMatch_02 = STR_NOT_EQUAL;
 800094a:	2300      	movs	r3, #0
 800094c:	71fb      	strb	r3, [r7, #7]
			  strcmpReturnType isMatch_03 = STR_NOT_EQUAL;
 800094e:	2300      	movs	r3, #0
 8000950:	71bb      	strb	r3, [r7, #6]
			  strcmpReturnType isMatch_04 = STR_NOT_EQUAL;
 8000952:	2300      	movs	r3, #0
 8000954:	717b      	strb	r3, [r7, #5]

			  /*compare with turn on green led command*/
			  isMatch_01 = strCmp(turn_on_green_led, RxBuffer, sizeof(turn_on_green_led));
 8000956:	2212      	movs	r2, #18
 8000958:	493b      	ldr	r1, [pc, #236]	; (8000a48 <USART1_Process+0x1e4>)
 800095a:	483e      	ldr	r0, [pc, #248]	; (8000a54 <USART1_Process+0x1f0>)
 800095c:	f7ff fe9a 	bl	8000694 <strCmp>
 8000960:	4603      	mov	r3, r0
 8000962:	713b      	strb	r3, [r7, #4]

			  /*check return status*/

			  if(STR_EQUAL == isMatch_01)
 8000964:	793b      	ldrb	r3, [r7, #4]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d107      	bne.n	800097a <USART1_Process+0x116>
			  {
				  /*Turn on green led*/
				  GPIO_TurnON_LED(EVAL_GREEN_LED);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fd48 	bl	8000400 <GPIO_TurnON_LED>

				  /*Transmit data*/
				  strTransmit(done, sizeof(done));
 8000970:	2105      	movs	r1, #5
 8000972:	4839      	ldr	r0, [pc, #228]	; (8000a58 <USART1_Process+0x1f4>)
 8000974:	f7ff fe12 	bl	800059c <strTransmit>
 8000978:	e006      	b.n	8000988 <USART1_Process+0x124>
			  }
			  else
			  {
				  /*compare with turn on red led command*/

				  isMatch_02 = strCmp(turn_on_red_led, RxBuffer, sizeof(turn_on_red_led));
 800097a:	2210      	movs	r2, #16
 800097c:	4932      	ldr	r1, [pc, #200]	; (8000a48 <USART1_Process+0x1e4>)
 800097e:	4837      	ldr	r0, [pc, #220]	; (8000a5c <USART1_Process+0x1f8>)
 8000980:	f7ff fe88 	bl	8000694 <strCmp>
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
			  }

			  /*check return status*/

			  if(STR_EQUAL == isMatch_02)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d107      	bne.n	800099e <USART1_Process+0x13a>
			  {
				  /*Turn on red led*/
				  GPIO_TurnON_LED(EVAL_RED_LED);
 800098e:	2002      	movs	r0, #2
 8000990:	f7ff fd36 	bl	8000400 <GPIO_TurnON_LED>

				  /*Transmit data*/
				  strTransmit(done,sizeof(done));
 8000994:	2105      	movs	r1, #5
 8000996:	4830      	ldr	r0, [pc, #192]	; (8000a58 <USART1_Process+0x1f4>)
 8000998:	f7ff fe00 	bl	800059c <strTransmit>
 800099c:	e009      	b.n	80009b2 <USART1_Process+0x14e>

			  }
			  else if (STR_NOT_EQUAL == isMatch_01)
 800099e:	793b      	ldrb	r3, [r7, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d106      	bne.n	80009b2 <USART1_Process+0x14e>
			  {
				  /*compare with turn off green led command*/
				  isMatch_03 = strCmp(turn_off_green_led , RxBuffer, sizeof(turn_off_green_led));
 80009a4:	2213      	movs	r2, #19
 80009a6:	4928      	ldr	r1, [pc, #160]	; (8000a48 <USART1_Process+0x1e4>)
 80009a8:	482d      	ldr	r0, [pc, #180]	; (8000a60 <USART1_Process+0x1fc>)
 80009aa:	f7ff fe73 	bl	8000694 <strCmp>
 80009ae:	4603      	mov	r3, r0
 80009b0:	71bb      	strb	r3, [r7, #6]
			  {
				  /*do nothing*/
			  }

			  /*check return status*/
			  if(STR_EQUAL == isMatch_03)
 80009b2:	79bb      	ldrb	r3, [r7, #6]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d107      	bne.n	80009c8 <USART1_Process+0x164>
			  {
				  /*Turn off green led*/
				  GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff fd47 	bl	800044c <GPIO_TurnOFF_LED>

				  /*Transmit data*/
				  strTransmit(done,sizeof(done));
 80009be:	2105      	movs	r1, #5
 80009c0:	4825      	ldr	r0, [pc, #148]	; (8000a58 <USART1_Process+0x1f4>)
 80009c2:	f7ff fdeb 	bl	800059c <strTransmit>
 80009c6:	e00c      	b.n	80009e2 <USART1_Process+0x17e>

			  }
			  else if ((STR_NOT_EQUAL == isMatch_02) && (STR_NOT_EQUAL == isMatch_01))
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d109      	bne.n	80009e2 <USART1_Process+0x17e>
 80009ce:	793b      	ldrb	r3, [r7, #4]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d106      	bne.n	80009e2 <USART1_Process+0x17e>
			  {
				  /*compare with turn off red led command*/

				  isMatch_04 = strCmp(turn_off_red_led , RxBuffer , sizeof(turn_off_red_led));
 80009d4:	2211      	movs	r2, #17
 80009d6:	491c      	ldr	r1, [pc, #112]	; (8000a48 <USART1_Process+0x1e4>)
 80009d8:	4822      	ldr	r0, [pc, #136]	; (8000a64 <USART1_Process+0x200>)
 80009da:	f7ff fe5b 	bl	8000694 <strCmp>
 80009de:	4603      	mov	r3, r0
 80009e0:	717b      	strb	r3, [r7, #5]
				  /*Do nothing*/
			  }

			  /*check return status*/

			  if(STR_EQUAL == isMatch_04)
 80009e2:	797b      	ldrb	r3, [r7, #5]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d107      	bne.n	80009f8 <USART1_Process+0x194>
			  {
				  /*Turn off red led*/
				  GPIO_TurnOFF_LED(EVAL_RED_LED);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f7ff fd2f 	bl	800044c <GPIO_TurnOFF_LED>

			      /*Transmit data*/
				  strTransmit(done,sizeof(done));
 80009ee:	2105      	movs	r1, #5
 80009f0:	4819      	ldr	r0, [pc, #100]	; (8000a58 <USART1_Process+0x1f4>)
 80009f2:	f7ff fdd3 	bl	800059c <strTransmit>
		  }
		  else
		  {
			  /*Nothing received yet*/
		  }
		  break;
 80009f6:	e013      	b.n	8000a20 <USART1_Process+0x1bc>
			  else if ((STR_NOT_EQUAL == isMatch_03) && (STR_NOT_EQUAL == isMatch_02) && (STR_NOT_EQUAL == isMatch_01))
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <USART1_Process+0x1bc>
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d10d      	bne.n	8000a20 <USART1_Process+0x1bc>
 8000a04:	793b      	ldrb	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10a      	bne.n	8000a20 <USART1_Process+0x1bc>
				  strTransmit(wrong_command , sizeof(wrong_command));
 8000a0a:	210e      	movs	r1, #14
 8000a0c:	4816      	ldr	r0, [pc, #88]	; (8000a68 <USART1_Process+0x204>)
 8000a0e:	f7ff fdc5 	bl	800059c <strTransmit>
		  break;
 8000a12:	e005      	b.n	8000a20 <USART1_Process+0x1bc>

	  default:
		  break;
 8000a14:	bf00      	nop
 8000a16:	e004      	b.n	8000a22 <USART1_Process+0x1be>
		  break;
 8000a18:	bf00      	nop
 8000a1a:	e002      	b.n	8000a22 <USART1_Process+0x1be>
		  break;
 8000a1c:	bf00      	nop
 8000a1e:	e000      	b.n	8000a22 <USART1_Process+0x1be>
		  break;
 8000a20:	bf00      	nop
	}


}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000031 	.word	0x20000031
 8000a30:	0800104c 	.word	0x0800104c
 8000a34:	20000030 	.word	0x20000030
 8000a38:	08000f70 	.word	0x08000f70
 8000a3c:	200000fd 	.word	0x200000fd
 8000a40:	08000f80 	.word	0x08000f80
 8000a44:	08000f94 	.word	0x08000f94
 8000a48:	20000034 	.word	0x20000034
 8000a4c:	08000f9c 	.word	0x08000f9c
 8000a50:	08000fb4 	.word	0x08000fb4
 8000a54:	08000fe8 	.word	0x08000fe8
 8000a58:	08001034 	.word	0x08001034
 8000a5c:	08000ffc 	.word	0x08000ffc
 8000a60:	0800100c 	.word	0x0800100c
 8000a64:	08001020 	.word	0x08001020
 8000a68:	0800103c 	.word	0x0800103c

08000a6c <USART1_IRQ_Callback>:

void USART1_IRQ_Callback(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

	/*check if parity error detected*/
	if((USART1->SR & USART_SR_PE) == USART_SR_PE)
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <USART1_IRQ_Callback+0x58>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d10c      	bne.n	8000a98 <USART1_IRQ_Callback+0x2c>
	{
		while((USART1->SR & USART_SR_RXNE) != USART_SR_RXNE)
 8000a7e:	bf00      	nop
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <USART1_IRQ_Callback+0x58>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	f003 0320 	and.w	r3, r3, #32
 8000a8a:	2b20      	cmp	r3, #32
 8000a8c:	d1f8      	bne.n	8000a80 <USART1_IRQ_Callback+0x14>
			/*wait for RXNE flag to be set*/

		}

		/*Read data register to clear parity error */
		USART1->DR;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <USART1_IRQ_Callback+0x58>)
 8000a90:	889b      	ldrh	r3, [r3, #4]

		/*Set Parity error*/
		currentIRQStatus = USART1_PARITY_ERROR;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <USART1_IRQ_Callback+0x5c>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	701a      	strb	r2, [r3, #0]
		/*No parity error*/
	}


	/*check USART receiver*/
	if((USART1->SR & USART_SR_RXNE) == USART_SR_RXNE)
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <USART1_IRQ_Callback+0x58>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	2b20      	cmp	r3, #32
 8000aa4:	d108      	bne.n	8000ab8 <USART1_IRQ_Callback+0x4c>
	{
		/*Read character*/

		RxChar = USART1->DR;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <USART1_IRQ_Callback+0x58>)
 8000aa8:	889b      	ldrh	r3, [r3, #4]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <USART1_IRQ_Callback+0x60>)
 8000ab0:	701a      	strb	r2, [r3, #0]

		/*Set IRQ status*/
		currentIRQStatus = USART1_CHAR_RECEIVED;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <USART1_IRQ_Callback+0x5c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
	else
	{
		/*No new data received*/
	}

}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	20000031 	.word	0x20000031
 8000acc:	20000032 	.word	0x20000032

08000ad0 <main>:



int main (void)

{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0


	SysTick_Init();
 8000ad4:	f7ff fbd6 	bl	8000284 <SysTick_Init>
	GPIO_init_LED(EVAL_GREEN_LED);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fc13 	bl	8000304 <GPIO_init_LED>
	GPIO_init_LED(EVAL_RED_LED);
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f7ff fc10 	bl	8000304 <GPIO_init_LED>
	NVIC_Init();
 8000ae4:	f7ff fd40 	bl	8000568 <NVIC_Init>

	/* GPIO and USART configurations */
	USART1_GPIO_Config();
 8000ae8:	f7ff fe00 	bl	80006ec <USART1_GPIO_Config>
	USART1_Init();
 8000aec:	f7ff fe46 	bl	800077c <USART1_Init>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000af0:	b662      	cpsie	i
	/*Clear PRIMASK . enable IRQ*/

	__enable_irq();

	/* Enable transmitter , receiver and interrupts*/
	USART1_Enable();
 8000af2:	f7ff fe85 	bl	8000800 <USART1_Enable>
	while(1)

	{

		/*Sending and receiving data*/
		USART1_Process();
 8000af6:	f7ff feb5 	bl	8000864 <USART1_Process>
 8000afa:	e7fc      	b.n	8000af6 <main+0x26>

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000afc:	f8df d038 	ldr.w	sp, [pc, #56]	; 8000b38 <LoopFillZerobss+0x16>
  
  /*Disable interrupt (set PRIMASK)*/
  CPSID i
 8000b00:	b672      	cpsid	i

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b02:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b04:	e003      	b.n	8000b0e <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8000b08:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b0a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b0c:	3104      	adds	r1, #4

08000b0e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000b12:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b14:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b16:	d3f6      	bcc.n	8000b06 <CopyDataInit>
  ldr  r2, =_sbss
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000b1a:	e002      	b.n	8000b22 <LoopFillZerobss>

08000b1c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b1c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b1e:	f842 3b04 	str.w	r3, [r2], #4

08000b22 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8000b24:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b26:	d3f9      	bcc.n	8000b1c <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b28:	f000 f8c4 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2c:	f000 f9f0 	bl	8000f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b30:	f7ff ffce 	bl	8000ad0 <main>
  bx  lr    
 8000b34:	4770      	bx	lr
 8000b36:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b38:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000b3c:	08001064 	.word	0x08001064
  ldr  r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b44:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000b48:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000b4c:	200001d0 	.word	0x200001d0

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <NVIC_SetPendingIRQ>:
    The function sets the pending bit of an external interrupt.

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8000b5e:	4909      	ldr	r1, [pc, #36]	; (8000b84 <NVIC_SetPendingIRQ+0x30>)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	095b      	lsrs	r3, r3, #5
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	f002 021f 	and.w	r2, r2, #31
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	3340      	adds	r3, #64	; 0x40
 8000b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */

	++SysTickCounter;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Handler+0x18>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <SysTick_Handler+0x18>)
 8000be4:	6013      	str	r3, [r2, #0]
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	200001cc 	.word	0x200001cc

08000bf4 <EXTI0_IRQHandler>:
{
}*/


void EXTI0_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

	/* Turn on green led */

	GPIO_TurnON_LED(EVAL_GREEN_LED);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fc01 	bl	8000400 <GPIO_TurnON_LED>

	/*wait one second*/

	SysTick_Delay(1000);
 8000bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c02:	f7ff fb67 	bl	80002d4 <SysTick_Delay>

	/*Turn off green led*/

	GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff fc20 	bl	800044c <GPIO_TurnOFF_LED>

	/*wait one second*/

	SysTick_Delay(100);
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f7ff fb61 	bl	80002d4 <SysTick_Delay>

	/*clear pending bit*/

	EXTI->PR |= EXTI_PR_PR0;
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <EXTI0_IRQHandler+0x30>)
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <EXTI0_IRQHandler+0x30>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6153      	str	r3, [r2, #20]



}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40013c00 	.word	0x40013c00

08000c28 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

	GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fc0d 	bl	800044c <GPIO_TurnOFF_LED>
	SysTick_Delay(500);
 8000c32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c36:	f7ff fb4d 	bl	80002d4 <SysTick_Delay>
	NVIC_SetPendingIRQ(RED_LED_ON_IRQ);
 8000c3a:	2008      	movs	r0, #8
 8000c3c:	f7ff ff8a 	bl	8000b54 <NVIC_SetPendingIRQ>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

	GPIO_TurnON_LED(EVAL_RED_LED);
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f7ff fbd9 	bl	8000400 <GPIO_TurnON_LED>
	SysTick_Delay(500);
 8000c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c52:	f7ff fb3f 	bl	80002d4 <SysTick_Delay>
	NVIC_SetPendingIRQ(RED_LED_OFF_IRQ);
 8000c56:	2009      	movs	r0, #9
 8000c58:	f7ff ff7c 	bl	8000b54 <NVIC_SetPendingIRQ>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

	GPIO_TurnOFF_LED(EVAL_RED_LED);
 8000c64:	2002      	movs	r0, #2
 8000c66:	f7ff fbf1 	bl	800044c <GPIO_TurnOFF_LED>
	SysTick_Delay(500);
 8000c6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6e:	f7ff fb31 	bl	80002d4 <SysTick_Delay>
	NVIC_SetPendingIRQ(GREEN_LED_ON_IRQ);
 8000c72:	2006      	movs	r0, #6
 8000c74:	f7ff ff6e 	bl	8000b54 <NVIC_SetPendingIRQ>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

	/*check transfer complete flag*/
	if(DMA_LISR_TCIF0 == (DMA_LISR_TCIF0 & DMA2->LISR))
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <DMA2_Stream0_IRQHandler+0x28>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 0320 	and.w	r3, r3, #32
 8000c88:	2b20      	cmp	r3, #32
 8000c8a:	d106      	bne.n	8000c9a <DMA2_Stream0_IRQHandler+0x1e>
	{
		/*DMA transfer is complete , turn off green led*/

		GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fbdd 	bl	800044c <GPIO_TurnOFF_LED>

		/*clear transfer complete flag*/
		DMA2->LIFCR = DMA_LIFCR_CTCIF0;
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <DMA2_Stream0_IRQHandler+0x28>)
 8000c94:	2220      	movs	r2, #32
 8000c96:	609a      	str	r2, [r3, #8]

		GPIO_TurnON_LED(EVAL_RED_LED);

	}

}
 8000c98:	e002      	b.n	8000ca0 <DMA2_Stream0_IRQHandler+0x24>
		GPIO_TurnON_LED(EVAL_RED_LED);
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f7ff fbb0 	bl	8000400 <GPIO_TurnON_LED>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40026400 	.word	0x40026400

08000ca8 <USART1_IRQHandler>:


void USART1_IRQHandler (void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	USART1_IRQ_Callback();
 8000cac:	f7ff fede 	bl	8000a6c <USART1_IRQ_Callback>

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <SystemInit+0x60>)
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <SystemInit+0x60>)
 8000cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <SystemInit+0x64>)
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <SystemInit+0x64>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <SystemInit+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <SystemInit+0x64>)
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <SystemInit+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <SystemInit+0x64>)
 8000cec:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <SystemInit+0x68>)
 8000cee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cf0:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <SystemInit+0x64>)
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <SystemInit+0x64>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <SystemInit+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000d02:	f000 f889 	bl	8000e18 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d06:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <SystemInit+0x60>)
 8000d08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0c:	609a      	str	r2, [r3, #8]
#endif
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	24003010 	.word	0x24003010

08000d20 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	2302      	movs	r3, #2
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	2302      	movs	r3, #2
 8000d38:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d3a:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <SystemCoreClockUpdate+0xe4>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d007      	beq.n	8000d5a <SystemCoreClockUpdate+0x3a>
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d009      	beq.n	8000d62 <SystemCoreClockUpdate+0x42>
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d13d      	bne.n	8000dce <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <SystemCoreClockUpdate+0xe8>)
 8000d54:	4a2d      	ldr	r2, [pc, #180]	; (8000e0c <SystemCoreClockUpdate+0xec>)
 8000d56:	601a      	str	r2, [r3, #0]
      break;
 8000d58:	e03d      	b.n	8000dd6 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <SystemCoreClockUpdate+0xe8>)
 8000d5c:	4a2c      	ldr	r2, [pc, #176]	; (8000e10 <SystemCoreClockUpdate+0xf0>)
 8000d5e:	601a      	str	r2, [r3, #0]
      break;
 8000d60:	e039      	b.n	8000dd6 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <SystemCoreClockUpdate+0xe4>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	0d9b      	lsrs	r3, r3, #22
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <SystemCoreClockUpdate+0xe4>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d76:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00c      	beq.n	8000d98 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d7e:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <SystemCoreClockUpdate+0xf0>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <SystemCoreClockUpdate+0xe4>)
 8000d88:	6852      	ldr	r2, [r2, #4]
 8000d8a:	0992      	lsrs	r2, r2, #6
 8000d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d90:	fb02 f303 	mul.w	r3, r2, r3
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e00b      	b.n	8000db0 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000d98:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <SystemCoreClockUpdate+0xec>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <SystemCoreClockUpdate+0xe4>)
 8000da2:	6852      	ldr	r2, [r2, #4]
 8000da4:	0992      	lsrs	r2, r2, #6
 8000da6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000daa:	fb02 f303 	mul.w	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <SystemCoreClockUpdate+0xe4>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	0c1b      	lsrs	r3, r3, #16
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	3301      	adds	r3, #1
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <SystemCoreClockUpdate+0xe8>)
 8000dca:	6013      	str	r3, [r2, #0]
      break;
 8000dcc:	e003      	b.n	8000dd6 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <SystemCoreClockUpdate+0xe8>)
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <SystemCoreClockUpdate+0xec>)
 8000dd2:	601a      	str	r2, [r3, #0]
      break;
 8000dd4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <SystemCoreClockUpdate+0xe4>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	f003 030f 	and.w	r3, r3, #15
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <SystemCoreClockUpdate+0xf4>)
 8000de2:	5cd3      	ldrb	r3, [r2, r3]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <SystemCoreClockUpdate+0xe8>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	fa22 f303 	lsr.w	r3, r2, r3
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <SystemCoreClockUpdate+0xe8>)
 8000df4:	6013      	str	r3, [r2, #0]
}
 8000df6:	bf00      	nop
 8000df8:	371c      	adds	r7, #28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	00f42400 	.word	0x00f42400
 8000e10:	007a1200 	.word	0x007a1200
 8000e14:	20000004 	.word	0x20000004

08000e18 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000e26:	4a36      	ldr	r2, [pc, #216]	; (8000f00 <SetSysClock+0xe8>)
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <SetSysClock+0xe8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000e32:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <SetSysClock+0xe8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d103      	bne.n	8000e50 <SetSysClock+0x38>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e4e:	d1f0      	bne.n	8000e32 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <SetSysClock+0xe8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	e001      	b.n	8000e66 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d102      	bne.n	8000e72 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <SetSysClock+0xe8>)
 8000e6e:	4a25      	ldr	r2, [pc, #148]	; (8000f04 <SetSysClock+0xec>)
 8000e70:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <SetSysClock+0xe8>)
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <SetSysClock+0xe8>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000e7e:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <SetSysClock+0xf0>)
 8000e80:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <SetSysClock+0xf0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e88:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000e8a:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <SetSysClock+0xe8>)
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <SetSysClock+0xe8>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <SetSysClock+0xe8>)
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <SetSysClock+0xe8>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <SetSysClock+0xe8>)
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <SetSysClock+0xe8>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000ea8:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000eaa:	4a15      	ldr	r2, [pc, #84]	; (8000f00 <SetSysClock+0xe8>)
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <SetSysClock+0xe8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eb4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000eb6:	bf00      	nop
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <SetSysClock+0xe8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f9      	beq.n	8000eb8 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <SetSysClock+0xf4>)
 8000ec6:	f240 7205 	movw	r2, #1797	; 0x705
 8000eca:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <SetSysClock+0xe8>)
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <SetSysClock+0xe8>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f023 0303 	bic.w	r3, r3, #3
 8000ed6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ed8:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <SetSysClock+0xe8>)
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <SetSysClock+0xe8>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000ee4:	bf00      	nop
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SetSysClock+0xe8>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d1f9      	bne.n	8000ee6 <SetSysClock+0xce>
    {
    }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	07405a08 	.word	0x07405a08
 8000f08:	40007000 	.word	0x40007000
 8000f0c:	40023c00 	.word	0x40023c00

08000f10 <__libc_init_array>:
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	4e0d      	ldr	r6, [pc, #52]	; (8000f48 <__libc_init_array+0x38>)
 8000f14:	4c0d      	ldr	r4, [pc, #52]	; (8000f4c <__libc_init_array+0x3c>)
 8000f16:	1ba4      	subs	r4, r4, r6
 8000f18:	10a4      	asrs	r4, r4, #2
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	42a5      	cmp	r5, r4
 8000f1e:	d109      	bne.n	8000f34 <__libc_init_array+0x24>
 8000f20:	4e0b      	ldr	r6, [pc, #44]	; (8000f50 <__libc_init_array+0x40>)
 8000f22:	4c0c      	ldr	r4, [pc, #48]	; (8000f54 <__libc_init_array+0x44>)
 8000f24:	f000 f818 	bl	8000f58 <_init>
 8000f28:	1ba4      	subs	r4, r4, r6
 8000f2a:	10a4      	asrs	r4, r4, #2
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	42a5      	cmp	r5, r4
 8000f30:	d105      	bne.n	8000f3e <__libc_init_array+0x2e>
 8000f32:	bd70      	pop	{r4, r5, r6, pc}
 8000f34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f38:	4798      	blx	r3
 8000f3a:	3501      	adds	r5, #1
 8000f3c:	e7ee      	b.n	8000f1c <__libc_init_array+0xc>
 8000f3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f42:	4798      	blx	r3
 8000f44:	3501      	adds	r5, #1
 8000f46:	e7f2      	b.n	8000f2e <__libc_init_array+0x1e>
 8000f48:	0800105c 	.word	0x0800105c
 8000f4c:	0800105c 	.word	0x0800105c
 8000f50:	0800105c 	.word	0x0800105c
 8000f54:	08001060 	.word	0x08001060

08000f58 <_init>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr

08000f64 <_fini>:
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f66:	bf00      	nop
 8000f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6a:	bc08      	pop	{r3}
 8000f6c:	469e      	mov	lr, r3
 8000f6e:	4770      	bx	lr
