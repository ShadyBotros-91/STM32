
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a74  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c20  08000c20  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000fc0  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000fd4  20000fd4  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002ac2  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000009bd  00000000  00000000  00022b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000210  00000000  00000000  000234c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000188  00000000  00000000  000236d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001396  00000000  00000000  00023860  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000edb  00000000  00000000  00024bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00025ad1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000578  00000000  00000000  00025b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000c08 	.word	0x08000c08

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08000c08 	.word	0x08000c08

080001ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	da0b      	bge.n	8000218 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000200:	490d      	ldr	r1, [pc, #52]	; (8000238 <NVIC_SetPriority+0x4c>)
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 030f 	and.w	r3, r3, #15
 8000208:	3b04      	subs	r3, #4
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000216:	e009      	b.n	800022c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000218:	4908      	ldr	r1, [pc, #32]	; (800023c <NVIC_SetPriority+0x50>)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	e000ed00 	.word	0xe000ed00
 800023c:	e000e100 	.word	0xe000e100

08000240 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000250:	d301      	bcc.n	8000256 <SysTick_Config+0x16>
 8000252:	2301      	movs	r3, #1
 8000254:	e00f      	b.n	8000276 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <SysTick_Config+0x40>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3b01      	subs	r3, #1
 800025c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800025e:	210f      	movs	r1, #15
 8000260:	f04f 30ff 	mov.w	r0, #4294967295
 8000264:	f7ff ffc2 	bl	80001ec <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <SysTick_Config+0x40>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <SysTick_Config+0x40>)
 8000270:	2207      	movs	r2, #7
 8000272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	e000e010 	.word	0xe000e010

08000284 <SysTick_Init>:
#include "SysTick.h"


void SysTick_Init(void)

{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	uint32_t returnCode;

	/*Update clock configuration*/
	SystemCoreClockUpdate();
 800028a:	f000 fba1 	bl	80009d0 <SystemCoreClockUpdate>

	/*check clock configuration*/
	if(SystemCoreClock != (uint32_t) 180000000)
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <SysTick_Init+0x44>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <SysTick_Init+0x48>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d000      	beq.n	800029a <SysTick_Init+0x16>
	{
		/*clock configuration is not OK*/
		while(1);
 8000298:	e7fe      	b.n	8000298 <SysTick_Init+0x14>
		/*clock configuration is OK*/
		//SysTick_IncrementTicks_cb();
	}

	/* Configure SysTick to generate an interrupt every millisecond*/
	returnCode = SysTick_Config(SystemCoreClock / 1000);
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <SysTick_Init+0x44>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <SysTick_Init+0x4c>)
 80002a0:	fba2 2303 	umull	r2, r3, r2, r3
 80002a4:	099b      	lsrs	r3, r3, #6
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffca 	bl	8000240 <SysTick_Config>
 80002ac:	6078      	str	r0, [r7, #4]

	/*check return code for errors */

	if(returnCode != 0)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d000      	beq.n	80002b6 <SysTick_Init+0x32>
	{
		/*SysTick Configuration failed*/
		while (1);
 80002b4:	e7fe      	b.n	80002b4 <SysTick_Init+0x30>
	{
		/*SysTick Configuration OK*/
		//SysTick_IncrementTicks_cb();
	}

	NVIC_SetPriority(SysTick_IRQn , 0);
 80002b6:	2100      	movs	r1, #0
 80002b8:	f04f 30ff 	mov.w	r0, #4294967295
 80002bc:	f7ff ff96 	bl	80001ec <NVIC_SetPriority>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000000 	.word	0x20000000
 80002cc:	0aba9500 	.word	0x0aba9500
 80002d0:	10624dd3 	.word	0x10624dd3

080002d4 <SysTick_Delay>:
	return (SysTickCounter);

}

void SysTick_Delay (uint32_t wait_time_ms)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]

	/*store start tick*/
	uint32_t startTick = SysTickCounter;
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <SysTick_Delay+0x2c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	60fb      	str	r3, [r7, #12]
	//SysTickCounter ++;
	/*Loop until timeout*/
	while((SysTickCounter - startTick) < wait_time_ms);
 80002e2:	bf00      	nop
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <SysTick_Delay+0x2c>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	1ad2      	subs	r2, r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d3f8      	bcc.n	80002e4 <SysTick_Delay+0x10>

}
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000fd0 	.word	0x20000fd0

08000304 <DMA2_Stream0_Init>:

#include "dma.h"


void DMA2_Stream0_Init()
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0

	/*Enable DMA clock in RCC*/
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000308:	4a29      	ldr	r2, [pc, #164]	; (80003b0 <DMA2_Stream0_Init+0xac>)
 800030a:	4b29      	ldr	r3, [pc, #164]	; (80003b0 <DMA2_Stream0_Init+0xac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000312:	6313      	str	r3, [r2, #48]	; 0x30

	/*make sure that the DMA2 stream 0 is disabled*/
	if(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream0->CR))
 8000314:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f003 0301 	and.w	r3, r3, #1
 800031c:	2b01      	cmp	r3, #1
 800031e:	d10c      	bne.n	800033a <DMA2_Stream0_Init+0x36>
	{
		/*DMA2 stream 0 is enabled  , shall be disabled first */

		DMA2_Stream0->CR &= ~ DMA_SxCR_EN;
 8000320:	4a24      	ldr	r2, [pc, #144]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000322:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f023 0301 	bic.w	r3, r3, #1
 800032a:	6013      	str	r3, [r2, #0]

		/*wait until EN bit is cleared*/

		while(DMA_SxCR_EN == (DMA_SxCR_EN & DMA2_Stream0->CR))
 800032c:	bf00      	nop
 800032e:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	2b01      	cmp	r3, #1
 8000338:	d0f9      	beq.n	800032e <DMA2_Stream0_Init+0x2a>
	/*select the DMA channel CHSEL[2:0] in the DMA_SxCR
	 * (not needed when M->M)*/

	/*Select stream priority very high*/

	DMA2_Stream0->CR |= DMA_SxCR_PL;
 800033a:	4a1e      	ldr	r2, [pc, #120]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 800033c:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000344:	6013      	str	r3, [r2, #0]

	/*Select the data transfer direction memory to memory*/

	DMA2_Stream0->CR |= DMA_SxCR_DIR_1;
 8000346:	4a1b      	ldr	r2, [pc, #108]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000348:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000350:	6013      	str	r3, [r2, #0]

	/*Select memory and peripherals sizes*/

	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_1;
 8000352:	4a18      	ldr	r2, [pc, #96]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035c:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_1;
 800035e:	4a15      	ldr	r2, [pc, #84]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000368:	6013      	str	r3, [r2, #0]

	/*Select FIFO mode , it will be also set by hardware when stream enabled*/

	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	6153      	str	r3, [r2, #20]

	/*Select FIFO threshold level half FIFO*/

	DMA2_Stream0->FCR |= DMA_SxFCR_FTH_0;
 8000376:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000378:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6153      	str	r3, [r2, #20]

	/*Select Peripheral and memory incremented mode*/

	DMA2_Stream0->CR |= DMA_SxCR_PINC;
 8000382:	4a0c      	ldr	r2, [pc, #48]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800038c:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 800038e:	4a09      	ldr	r2, [pc, #36]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000398:	6013      	str	r3, [r2, #0]

    /* Enable DMA transfer complete interrupt*/

	DMA2_Stream0->CR |= DMA_SxCR_TCIE;
 800039a:	4a06      	ldr	r2, [pc, #24]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <DMA2_Stream0_Init+0xb0>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f043 0310 	orr.w	r3, r3, #16
 80003a4:	6013      	str	r3, [r2, #0]


}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40026410 	.word	0x40026410

080003b8 <DMA2_Stream0_Set_Addresses>:


void DMA2_Stream0_Set_Addresses(const uint32_t * src ,
		uint32_t * dst , const uint32_t size)

{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]

	/*Set the source address to the peripheral port*/

	DMA2_Stream0->PAR = (uint32_t)src;
 80003c4:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <DMA2_Stream0_Set_Addresses+0x2c>)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	6093      	str	r3, [r2, #8]

	/*Set the destination address to the memory port*/

	DMA2_Stream0->M0AR = (uint32_t)dst;
 80003ca:	4a06      	ldr	r2, [pc, #24]	; (80003e4 <DMA2_Stream0_Set_Addresses+0x2c>)
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	60d3      	str	r3, [r2, #12]

	/*Set the number of data items*/

	DMA2_Stream0->NDTR = size;
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <DMA2_Stream0_Set_Addresses+0x2c>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6053      	str	r3, [r2, #4]


}
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40026410 	.word	0x40026410

080003e8 <DMA2_Stream0_Enable>:

void DMA2_Stream0_Enable()
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	/*Clear all interrupt flags */

	DMA2->LIFCR = (DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0 | DMA_LIFCR_CTEIF0 | DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTCIF0);
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <DMA2_Stream0_Enable+0x20>)
 80003ee:	223d      	movs	r2, #61	; 0x3d
 80003f0:	609a      	str	r2, [r3, #8]

	/*Enable DMA2 stream0*/

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 80003f2:	4a06      	ldr	r2, [pc, #24]	; (800040c <DMA2_Stream0_Enable+0x24>)
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <DMA2_Stream0_Enable+0x24>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6013      	str	r3, [r2, #0]

}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40026400 	.word	0x40026400
 800040c:	40026410 	.word	0x40026410

08000410 <EXTI_Init_PB>:


#include "exti.h"

void EXTI_Init_PB()
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

	/*Enable SYSCFG clock*/

	RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 8000414:	4a13      	ldr	r2, [pc, #76]	; (8000464 <EXTI_Init_PB+0x54>)
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <EXTI_Init_PB+0x54>)
 8000418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800041a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041e:	6453      	str	r3, [r2, #68]	; 0x44

	/* Map PA0 to EXT0*/

	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000420:	4a11      	ldr	r2, [pc, #68]	; (8000468 <EXTI_Init_PB+0x58>)
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <EXTI_Init_PB+0x58>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	6093      	str	r3, [r2, #8]

	/* Enable rising edge trigger*/

	EXTI->RTSR |= EXTI_RTSR_TR0;
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <EXTI_Init_PB+0x5c>)
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <EXTI_Init_PB+0x5c>)
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6093      	str	r3, [r2, #8]

	/* Disable falling edge trigger*/

	EXTI->FTSR &= ~(EXTI_FTSR_TR0);
 8000434:	4a0d      	ldr	r2, [pc, #52]	; (800046c <EXTI_Init_PB+0x5c>)
 8000436:	4b0d      	ldr	r3, [pc, #52]	; (800046c <EXTI_Init_PB+0x5c>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	60d3      	str	r3, [r2, #12]

	/*Enable interrupt line*/

	EXTI->IMR |= EXTI_IMR_MR0;
 8000440:	4a0a      	ldr	r2, [pc, #40]	; (800046c <EXTI_Init_PB+0x5c>)
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <EXTI_Init_PB+0x5c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]

	/*Enable event line*/

	EXTI->EMR |= EXTI_EMR_MR0;
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <EXTI_Init_PB+0x5c>)
 800044e:	4b07      	ldr	r3, [pc, #28]	; (800046c <EXTI_Init_PB+0x5c>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	6053      	str	r3, [r2, #4]




}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40023800 	.word	0x40023800
 8000468:	40013800 	.word	0x40013800
 800046c:	40013c00 	.word	0x40013c00

08000470 <GPIO_init_LED>:
 */

#include "gpio.h"

void GPIO_init_LED(Led_Type led)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
	switch (led)
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <GPIO_init_LED+0x16>
 8000480:	2b02      	cmp	r3, #2
 8000482:	d033      	beq.n	80004ec <GPIO_init_LED+0x7c>
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR14);


			break;
	default:
		break;
 8000484:	e065      	b.n	8000552 <GPIO_init_LED+0xe2>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000486:	4a36      	ldr	r2, [pc, #216]	; (8000560 <GPIO_init_LED+0xf0>)
 8000488:	4b35      	ldr	r3, [pc, #212]	; (8000560 <GPIO_init_LED+0xf0>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOG->MODER |= GPIO_MODER_MODER13_0;
 8000492:	4a34      	ldr	r2, [pc, #208]	; (8000564 <GPIO_init_LED+0xf4>)
 8000494:	4b33      	ldr	r3, [pc, #204]	; (8000564 <GPIO_init_LED+0xf4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800049c:	6013      	str	r3, [r2, #0]
		GPIOG->OTYPER &= ~(GPIO_OTYPER_OT_13);
 800049e:	4a31      	ldr	r2, [pc, #196]	; (8000564 <GPIO_init_LED+0xf4>)
 80004a0:	4b30      	ldr	r3, [pc, #192]	; (8000564 <GPIO_init_LED+0xf4>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004a8:	6053      	str	r3, [r2, #4]
		GPIOG->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR13_0 | GPIO_OSPEEDER_OSPEEDR13_1);
 80004aa:	4a2e      	ldr	r2, [pc, #184]	; (8000564 <GPIO_init_LED+0xf4>)
 80004ac:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <GPIO_init_LED+0xf4>)
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80004b4:	6093      	str	r3, [r2, #8]
		RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 80004b6:	4a2a      	ldr	r2, [pc, #168]	; (8000560 <GPIO_init_LED+0xf0>)
 80004b8:	4b29      	ldr	r3, [pc, #164]	; (8000560 <GPIO_init_LED+0xf0>)
 80004ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c0:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
 80004c2:	4a29      	ldr	r2, [pc, #164]	; (8000568 <GPIO_init_LED+0xf8>)
 80004c4:	4b28      	ldr	r3, [pc, #160]	; (8000568 <GPIO_init_LED+0xf8>)
 80004c6:	6a1b      	ldr	r3, [r3, #32]
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6213      	str	r3, [r2, #32]
		while ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 80004ce:	bf00      	nop
 80004d0:	4b25      	ldr	r3, [pc, #148]	; (8000568 <GPIO_init_LED+0xf8>)
 80004d2:	6a1b      	ldr	r3, [r3, #32]
 80004d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004dc:	d1f8      	bne.n	80004d0 <GPIO_init_LED+0x60>
		GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR13);
 80004de:	4a21      	ldr	r2, [pc, #132]	; (8000564 <GPIO_init_LED+0xf4>)
 80004e0:	4b20      	ldr	r3, [pc, #128]	; (8000564 <GPIO_init_LED+0xf4>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80004e8:	60d3      	str	r3, [r2, #12]
		break;
 80004ea:	e032      	b.n	8000552 <GPIO_init_LED+0xe2>
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 80004ec:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <GPIO_init_LED+0xf0>)
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <GPIO_init_LED+0xf0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG->MODER |= GPIO_MODER_MODER14_0;
 80004f8:	4a1a      	ldr	r2, [pc, #104]	; (8000564 <GPIO_init_LED+0xf4>)
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <GPIO_init_LED+0xf4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000502:	6013      	str	r3, [r2, #0]
			GPIOG->OTYPER &= ~(GPIO_OTYPER_OT_14);
 8000504:	4a17      	ldr	r2, [pc, #92]	; (8000564 <GPIO_init_LED+0xf4>)
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <GPIO_init_LED+0xf4>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800050e:	6053      	str	r3, [r2, #4]
			GPIOG->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR14_0 | GPIO_OSPEEDER_OSPEEDR14_1);
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <GPIO_init_LED+0xf4>)
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <GPIO_init_LED+0xf4>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800051a:	6093      	str	r3, [r2, #8]
			RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 800051c:	4a10      	ldr	r2, [pc, #64]	; (8000560 <GPIO_init_LED+0xf0>)
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <GPIO_init_LED+0xf0>)
 8000520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000526:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
 8000528:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <GPIO_init_LED+0xf8>)
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <GPIO_init_LED+0xf8>)
 800052c:	6a1b      	ldr	r3, [r3, #32]
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6213      	str	r3, [r2, #32]
			while ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 8000534:	bf00      	nop
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <GPIO_init_LED+0xf8>)
 8000538:	6a1b      	ldr	r3, [r3, #32]
 800053a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800053e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000542:	d1f8      	bne.n	8000536 <GPIO_init_LED+0xc6>
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR14);
 8000544:	4a07      	ldr	r2, [pc, #28]	; (8000564 <GPIO_init_LED+0xf4>)
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <GPIO_init_LED+0xf4>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800054e:	60d3      	str	r3, [r2, #12]
			break;
 8000550:	bf00      	nop
	}


}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40023800 	.word	0x40023800
 8000564:	40021800 	.word	0x40021800
 8000568:	40013800 	.word	0x40013800

0800056c <GPIO_TurnON_LED>:
void GPIO_TurnON_LED(Led_Type led)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	switch (led)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d00e      	beq.n	800059a <GPIO_TurnON_LED+0x2e>
 800057c:	2b02      	cmp	r3, #2
 800057e:	d007      	beq.n	8000590 <GPIO_TurnON_LED+0x24>
 8000580:	2b00      	cmp	r3, #0
 8000582:	d000      	beq.n	8000586 <GPIO_TurnON_LED+0x1a>
	case EVAL_GREEN_LED_BITBAND:
				GREEN_LED_BITBAND = 1;
				break;

	default:
		break;
 8000584:	e00d      	b.n	80005a2 <GPIO_TurnON_LED+0x36>
		GPIOG->BSRRL = GPIO_BSRR_BS_13;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <GPIO_TurnON_LED+0x44>)
 8000588:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800058c:	831a      	strh	r2, [r3, #24]
		break;
 800058e:	e008      	b.n	80005a2 <GPIO_TurnON_LED+0x36>
		GPIOG->BSRRL = GPIO_BSRR_BS_14;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <GPIO_TurnON_LED+0x44>)
 8000592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000596:	831a      	strh	r2, [r3, #24]
		break;
 8000598:	e003      	b.n	80005a2 <GPIO_TurnON_LED+0x36>
				GREEN_LED_BITBAND = 1;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <GPIO_TurnON_LED+0x48>)
 800059c:	2201      	movs	r2, #1
 800059e:	601a      	str	r2, [r3, #0]
				break;
 80005a0:	bf00      	nop

	}

}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40021800 	.word	0x40021800
 80005b4:	424302b4 	.word	0x424302b4

080005b8 <GPIO_TurnOFF_LED>:
void GPIO_TurnOFF_LED(Led_Type led)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	switch (led)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d00e      	beq.n	80005e6 <GPIO_TurnOFF_LED+0x2e>
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d007      	beq.n	80005dc <GPIO_TurnOFF_LED+0x24>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d000      	beq.n	80005d2 <GPIO_TurnOFF_LED+0x1a>
		case EVAL_GREEN_LED_BITBAND:
			GREEN_LED_BITBAND = 0;
			break;

		default:
			break;
 80005d0:	e00d      	b.n	80005ee <GPIO_TurnOFF_LED+0x36>
			GPIOG->BSRRH = GPIO_BSRR_BS_13;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <GPIO_TurnOFF_LED+0x44>)
 80005d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d8:	835a      	strh	r2, [r3, #26]
			break;
 80005da:	e008      	b.n	80005ee <GPIO_TurnOFF_LED+0x36>
			GPIOG->BSRRH = GPIO_BSRR_BS_14;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <GPIO_TurnOFF_LED+0x44>)
 80005de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e2:	835a      	strh	r2, [r3, #26]
			break;
 80005e4:	e003      	b.n	80005ee <GPIO_TurnOFF_LED+0x36>
			GREEN_LED_BITBAND = 0;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <GPIO_TurnOFF_LED+0x48>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
			break;
 80005ec:	bf00      	nop

		}

}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40021800 	.word	0x40021800
 8000600:	424302b4 	.word	0x424302b4

08000604 <GPIO_Init_PB>:

void GPIO_Init_PB()
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

	/*Enable post PIOA clock in RCC*/

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000608:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <GPIO_Init_PB+0x34>)
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <GPIO_Init_PB+0x34>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6313      	str	r3, [r2, #48]	; 0x30

	/*Select input mode for PA0*/

	GPIOA->MODER &= ~(GPIO_MODER_MODER0);
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <GPIO_Init_PB+0x38>)
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <GPIO_Init_PB+0x38>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f023 0303 	bic.w	r3, r3, #3
 800061e:	6013      	str	r3, [r2, #0]

	/*Select no pull up because it has external pull down*/

	GPIOA->PUPDR |= ~(GPIO_PUPDR_PUPDR0);
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <GPIO_Init_PB+0x38>)
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <GPIO_Init_PB+0x38>)
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	f063 0303 	orn	r3, r3, #3
 800062a:	60d3      	str	r3, [r2, #12]



}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40020000 	.word	0x40020000

08000640 <NVIC_SetPriorityGrouping>:
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <NVIC_SetPriorityGrouping+0x44>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8000668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000672:	4a04      	ldr	r2, [pc, #16]	; (8000684 <NVIC_SetPriorityGrouping+0x44>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	60d3      	str	r3, [r2, #12]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_EnableIRQ>:
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <NVIC_EnableIRQ+0x30>)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	095b      	lsrs	r3, r3, #5
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	f002 021f 	and.w	r2, r2, #31
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100

080006bc <NVIC_SetPriority>:
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	da0b      	bge.n	80006e8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80006d0:	490d      	ldr	r1, [pc, #52]	; (8000708 <NVIC_SetPriority+0x4c>)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	3b04      	subs	r3, #4
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	440b      	add	r3, r1
 80006e4:	761a      	strb	r2, [r3, #24]
}
 80006e6:	e009      	b.n	80006fc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80006e8:	4908      	ldr	r1, [pc, #32]	; (800070c <NVIC_SetPriority+0x50>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	0112      	lsls	r2, r2, #4
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	e000e100 	.word	0xe000e100

08000710 <NVIC_Init>:


#include "nvic.h"

void NVIC_Init()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	/* Set Priority group to 3
	 * bits[3:0] are the sub-priority
	 * bits[7:4] are the pre-empt priority (0-15)
	 */

	NVIC_SetPriorityGrouping(3);
 8000714:	2003      	movs	r0, #3
 8000716:	f7ff ff93 	bl	8000640 <NVIC_SetPriorityGrouping>


	/*Set priority levels*/

	NVIC_SetPriority(SysTick_IRQn , 0);
 800071a:	2100      	movs	r1, #0
 800071c:	f04f 30ff 	mov.w	r0, #4294967295
 8000720:	f7ff ffcc 	bl	80006bc <NVIC_SetPriority>
	NVIC_SetPriority(EXTI0_IRQn , 1);
 8000724:	2101      	movs	r1, #1
 8000726:	2006      	movs	r0, #6
 8000728:	f7ff ffc8 	bl	80006bc <NVIC_SetPriority>
	NVIC_SetPriority(DMA2_Stream0_IRQn ,1);
 800072c:	2101      	movs	r1, #1
 800072e:	2038      	movs	r0, #56	; 0x38
 8000730:	f7ff ffc4 	bl	80006bc <NVIC_SetPriority>


	/*Enable interrupts at NVIC*/

	NVIC_EnableIRQ(EXTI0_IRQn);
 8000734:	2006      	movs	r0, #6
 8000736:	f7ff ffa7 	bl	8000688 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800073a:	2038      	movs	r0, #56	; 0x38
 800073c:	f7ff ffa4 	bl	8000688 <NVIC_EnableIRQ>


}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <main>:
static uint32_t	dstBuffer[BUFFER_SIZE];


int main (void)

{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

	ReturnStatus_Type	returnResults = RETURN_STATUS_NOT_OK;
 800074a:	2300      	movs	r3, #0
 800074c:	70fb      	strb	r3, [r7, #3]


	SysTick_Init();
 800074e:	f7ff fd99 	bl	8000284 <SysTick_Init>
	GPIO_init_LED(EVAL_GREEN_LED);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff fe8c 	bl	8000470 <GPIO_init_LED>
	GPIO_init_LED(EVAL_RED_LED);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe89 	bl	8000470 <GPIO_init_LED>
	GPIO_Init_PB();
 800075e:	f7ff ff51 	bl	8000604 <GPIO_Init_PB>
	EXTI_Init_PB();
 8000762:	f7ff fe55 	bl	8000410 <EXTI_Init_PB>
	NVIC_Init();
 8000766:	f7ff ffd3 	bl	8000710 <NVIC_Init>


	DMA2_Stream0_Init();
 800076a:	f7ff fdcb 	bl	8000304 <DMA2_Stream0_Init>
	DMA2_Stream0_Set_Addresses(srcBuffer , dstBuffer , BUFFER_SIZE);
 800076e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000772:	490f      	ldr	r1, [pc, #60]	; (80007b0 <main+0x6c>)
 8000774:	480f      	ldr	r0, [pc, #60]	; (80007b4 <main+0x70>)
 8000776:	f7ff fe1f 	bl	80003b8 <DMA2_Stream0_Set_Addresses>

	/*Initialize source buffer*/

	for(int idx = 0 ; idx < BUFFER_SIZE ; idx ++)
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e00b      	b.n	8000798 <main+0x54>
	{
		srcBuffer[idx] = idx * idx;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	fb02 f303 	mul.w	r3, r2, r3
 8000788:	4619      	mov	r1, r3
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <main+0x70>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int idx = 0 ; idx < BUFFER_SIZE ; idx ++)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3301      	adds	r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800079e:	d3ef      	bcc.n	8000780 <main+0x3c>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80007a0:	b662      	cpsie	i

	__enable_irq();

	/*Signal start of copying data , by turning on green LED*/

	GPIO_TurnON_LED(EVAL_GREEN_LED);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fee2 	bl	800056c <GPIO_TurnON_LED>

	/*DMA2 Stream0 enable*/
	DMA2_Stream0_Enable();
 80007a8:	f7ff fe1e 	bl	80003e8 <DMA2_Stream0_Enable>

	/*Infinite loop*/

	while(1)
 80007ac:	e7fe      	b.n	80007ac <main+0x68>
 80007ae:	bf00      	nop
 80007b0:	20000800 	.word	0x20000800
 80007b4:	20000030 	.word	0x20000030

080007b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b8:	f8df d038 	ldr.w	sp, [pc, #56]	; 80007f4 <LoopFillZerobss+0x16>
  
  /*Disable interrupt (set PRIMASK)*/
  CPSID i
 80007bc:	b672      	cpsid	i

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007be:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007c0:	e003      	b.n	80007ca <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 80007c4:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007c6:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007c8:	3104      	adds	r1, #4

080007ca <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 80007ce:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007d0:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007d2:	d3f6      	bcc.n	80007c2 <CopyDataInit>
  ldr  r2, =_sbss
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 80007d6:	e002      	b.n	80007de <LoopFillZerobss>

080007d8 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007d8:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007da:	f842 3b04 	str.w	r3, [r2], #4

080007de <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 80007e0:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007e2:	d3f9      	bcc.n	80007d8 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007e4:	f000 f8be 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007e8:	f000 f9ea 	bl	8000bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ec:	f7ff ffaa 	bl	8000744 <main>
  bx  lr    
 80007f0:	4770      	bx	lr
 80007f2:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80007f8:	08000c28 	.word	0x08000c28
  ldr  r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000800:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000804:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000808:	20000fd4 	.word	0x20000fd4

0800080c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC_IRQHandler>
	...

08000810 <NVIC_SetPendingIRQ>:
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 800081a:	4909      	ldr	r1, [pc, #36]	; (8000840 <NVIC_SetPendingIRQ+0x30>)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	095b      	lsrs	r3, r3, #5
 8000822:	79fa      	ldrb	r2, [r7, #7]
 8000824:	f002 021f 	and.w	r2, r2, #31
 8000828:	2001      	movs	r0, #1
 800082a:	fa00 f202 	lsl.w	r2, r0, r2
 800082e:	3340      	adds	r3, #64	; 0x40
 8000830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100

08000844 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */

	++SysTickCounter;
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <SysTick_Handler+0x18>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a03      	ldr	r2, [pc, #12]	; (80008ac <SysTick_Handler+0x18>)
 80008a0:	6013      	str	r3, [r2, #0]
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20000fd0 	.word	0x20000fd0

080008b0 <EXTI0_IRQHandler>:
{
}*/


void EXTI0_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

	/* Turn on green led */

	GPIO_TurnON_LED(EVAL_GREEN_LED);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fe59 	bl	800056c <GPIO_TurnON_LED>

	/*wait one second*/

	SysTick_Delay(1000);
 80008ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008be:	f7ff fd09 	bl	80002d4 <SysTick_Delay>

	/*Turn off green led*/

	GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff fe78 	bl	80005b8 <GPIO_TurnOFF_LED>

	/*wait one second*/

	SysTick_Delay(100);
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f7ff fd03 	bl	80002d4 <SysTick_Delay>

	/*clear pending bit*/

	EXTI->PR |= EXTI_PR_PR0;
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <EXTI0_IRQHandler+0x30>)
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <EXTI0_IRQHandler+0x30>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6153      	str	r3, [r2, #20]



}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40013c00 	.word	0x40013c00

080008e4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

	GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe65 	bl	80005b8 <GPIO_TurnOFF_LED>
	SysTick_Delay(500);
 80008ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f2:	f7ff fcef 	bl	80002d4 <SysTick_Delay>
	NVIC_SetPendingIRQ(RED_LED_ON_IRQ);
 80008f6:	2008      	movs	r0, #8
 80008f8:	f7ff ff8a 	bl	8000810 <NVIC_SetPendingIRQ>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

	GPIO_TurnON_LED(EVAL_RED_LED);
 8000904:	2002      	movs	r0, #2
 8000906:	f7ff fe31 	bl	800056c <GPIO_TurnON_LED>
	SysTick_Delay(500);
 800090a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090e:	f7ff fce1 	bl	80002d4 <SysTick_Delay>
	NVIC_SetPendingIRQ(RED_LED_OFF_IRQ);
 8000912:	2009      	movs	r0, #9
 8000914:	f7ff ff7c 	bl	8000810 <NVIC_SetPendingIRQ>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

	GPIO_TurnOFF_LED(EVAL_RED_LED);
 8000920:	2002      	movs	r0, #2
 8000922:	f7ff fe49 	bl	80005b8 <GPIO_TurnOFF_LED>
	SysTick_Delay(500);
 8000926:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800092a:	f7ff fcd3 	bl	80002d4 <SysTick_Delay>
	NVIC_SetPendingIRQ(GREEN_LED_ON_IRQ);
 800092e:	2006      	movs	r0, #6
 8000930:	f7ff ff6e 	bl	8000810 <NVIC_SetPendingIRQ>
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

	/*check transfer complete flag*/
	if(DMA_LISR_TCIF0 == (DMA_LISR_TCIF0 & DMA2->LISR))
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <DMA2_Stream0_IRQHandler+0x28>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	2b20      	cmp	r3, #32
 8000946:	d106      	bne.n	8000956 <DMA2_Stream0_IRQHandler+0x1e>
	{
		/*DMA transfer is complete , turn off green led*/

		GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fe35 	bl	80005b8 <GPIO_TurnOFF_LED>

		/*clear transfer complete flag*/
		DMA2->LIFCR = DMA_LIFCR_CTCIF0;
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <DMA2_Stream0_IRQHandler+0x28>)
 8000950:	2220      	movs	r2, #32
 8000952:	609a      	str	r2, [r3, #8]

		GPIO_TurnON_LED(EVAL_RED_LED);

	}

}
 8000954:	e002      	b.n	800095c <DMA2_Stream0_IRQHandler+0x24>
		GPIO_TurnON_LED(EVAL_RED_LED);
 8000956:	2002      	movs	r0, #2
 8000958:	f7ff fe08 	bl	800056c <GPIO_TurnON_LED>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40026400 	.word	0x40026400

08000964 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <SystemInit+0x60>)
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <SystemInit+0x60>)
 800096c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000978:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <SystemInit+0x64>)
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <SystemInit+0x64>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <SystemInit+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <SystemInit+0x64>)
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <SystemInit+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000998:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <SystemInit+0x64>)
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <SystemInit+0x68>)
 800099e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009a0:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <SystemInit+0x64>)
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <SystemInit+0x64>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80009b2:	f000 f889 	bl	8000ac8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009b6:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <SystemInit+0x60>)
 80009b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009bc:	609a      	str	r2, [r3, #8]
#endif
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00
 80009c8:	40023800 	.word	0x40023800
 80009cc:	24003010 	.word	0x24003010

080009d0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	2302      	movs	r3, #2
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	2302      	movs	r3, #2
 80009e8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009ea:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <SystemCoreClockUpdate+0xe4>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	f003 030c 	and.w	r3, r3, #12
 80009f2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d007      	beq.n	8000a0a <SystemCoreClockUpdate+0x3a>
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d009      	beq.n	8000a12 <SystemCoreClockUpdate+0x42>
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d13d      	bne.n	8000a7e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <SystemCoreClockUpdate+0xe8>)
 8000a04:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <SystemCoreClockUpdate+0xec>)
 8000a06:	601a      	str	r2, [r3, #0]
      break;
 8000a08:	e03d      	b.n	8000a86 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <SystemCoreClockUpdate+0xe8>)
 8000a0c:	4a2c      	ldr	r2, [pc, #176]	; (8000ac0 <SystemCoreClockUpdate+0xf0>)
 8000a0e:	601a      	str	r2, [r3, #0]
      break;
 8000a10:	e039      	b.n	8000a86 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <SystemCoreClockUpdate+0xe4>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	0d9b      	lsrs	r3, r3, #22
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <SystemCoreClockUpdate+0xe4>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a26:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00c      	beq.n	8000a48 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a2e:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <SystemCoreClockUpdate+0xf0>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <SystemCoreClockUpdate+0xe4>)
 8000a38:	6852      	ldr	r2, [r2, #4]
 8000a3a:	0992      	lsrs	r2, r2, #6
 8000a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a40:	fb02 f303 	mul.w	r3, r2, r3
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e00b      	b.n	8000a60 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000a48:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <SystemCoreClockUpdate+0xec>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <SystemCoreClockUpdate+0xe4>)
 8000a52:	6852      	ldr	r2, [r2, #4]
 8000a54:	0992      	lsrs	r2, r2, #6
 8000a56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a5a:	fb02 f303 	mul.w	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <SystemCoreClockUpdate+0xe4>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	0c1b      	lsrs	r3, r3, #16
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a78:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <SystemCoreClockUpdate+0xe8>)
 8000a7a:	6013      	str	r3, [r2, #0]
      break;
 8000a7c:	e003      	b.n	8000a86 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <SystemCoreClockUpdate+0xe8>)
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <SystemCoreClockUpdate+0xec>)
 8000a82:	601a      	str	r2, [r3, #0]
      break;
 8000a84:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <SystemCoreClockUpdate+0xe4>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	091b      	lsrs	r3, r3, #4
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <SystemCoreClockUpdate+0xf4>)
 8000a92:	5cd3      	ldrb	r3, [r2, r3]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <SystemCoreClockUpdate+0xe8>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemCoreClockUpdate+0xe8>)
 8000aa4:	6013      	str	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	371c      	adds	r7, #28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	00f42400 	.word	0x00f42400
 8000ac0:	007a1200 	.word	0x007a1200
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ad6:	4a36      	ldr	r2, [pc, #216]	; (8000bb0 <SetSysClock+0xe8>)
 8000ad8:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <SetSysClock+0xe8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ae0:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000ae2:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <SetSysClock+0xe8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3301      	adds	r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d103      	bne.n	8000b00 <SetSysClock+0x38>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000afe:	d1f0      	bne.n	8000ae2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b00:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <SetSysClock+0xe8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d002      	beq.n	8000b12 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	e001      	b.n	8000b16 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d102      	bne.n	8000b22 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <SetSysClock+0xe8>)
 8000b1e:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <SetSysClock+0xec>)
 8000b20:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b22:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <SetSysClock+0xe8>)
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <SetSysClock+0xe8>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000b2e:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <SetSysClock+0xf0>)
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <SetSysClock+0xf0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b38:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000b3a:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <SetSysClock+0xe8>)
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <SetSysClock+0xe8>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000b42:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <SetSysClock+0xe8>)
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <SetSysClock+0xe8>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b4c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000b4e:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <SetSysClock+0xe8>)
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <SetSysClock+0xe8>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000b58:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b5a:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <SetSysClock+0xe8>)
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <SetSysClock+0xe8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b64:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b66:	bf00      	nop
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <SetSysClock+0xe8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0f9      	beq.n	8000b68 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <SetSysClock+0xf4>)
 8000b76:	f240 7205 	movw	r2, #1797	; 0x705
 8000b7a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <SetSysClock+0xe8>)
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <SetSysClock+0xe8>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f023 0303 	bic.w	r3, r3, #3
 8000b86:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <SetSysClock+0xe8>)
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <SetSysClock+0xe8>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000b94:	bf00      	nop
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <SetSysClock+0xe8>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 030c 	and.w	r3, r3, #12
 8000b9e:	2b08      	cmp	r3, #8
 8000ba0:	d1f9      	bne.n	8000b96 <SetSysClock+0xce>
    {
    }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	07405a08 	.word	0x07405a08
 8000bb8:	40007000 	.word	0x40007000
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <__libc_init_array>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	4e0d      	ldr	r6, [pc, #52]	; (8000bf8 <__libc_init_array+0x38>)
 8000bc4:	4c0d      	ldr	r4, [pc, #52]	; (8000bfc <__libc_init_array+0x3c>)
 8000bc6:	1ba4      	subs	r4, r4, r6
 8000bc8:	10a4      	asrs	r4, r4, #2
 8000bca:	2500      	movs	r5, #0
 8000bcc:	42a5      	cmp	r5, r4
 8000bce:	d109      	bne.n	8000be4 <__libc_init_array+0x24>
 8000bd0:	4e0b      	ldr	r6, [pc, #44]	; (8000c00 <__libc_init_array+0x40>)
 8000bd2:	4c0c      	ldr	r4, [pc, #48]	; (8000c04 <__libc_init_array+0x44>)
 8000bd4:	f000 f818 	bl	8000c08 <_init>
 8000bd8:	1ba4      	subs	r4, r4, r6
 8000bda:	10a4      	asrs	r4, r4, #2
 8000bdc:	2500      	movs	r5, #0
 8000bde:	42a5      	cmp	r5, r4
 8000be0:	d105      	bne.n	8000bee <__libc_init_array+0x2e>
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000be8:	4798      	blx	r3
 8000bea:	3501      	adds	r5, #1
 8000bec:	e7ee      	b.n	8000bcc <__libc_init_array+0xc>
 8000bee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bf2:	4798      	blx	r3
 8000bf4:	3501      	adds	r5, #1
 8000bf6:	e7f2      	b.n	8000bde <__libc_init_array+0x1e>
 8000bf8:	08000c20 	.word	0x08000c20
 8000bfc:	08000c20 	.word	0x08000c20
 8000c00:	08000c20 	.word	0x08000c20
 8000c04:	08000c24 	.word	0x08000c24

08000c08 <_init>:
 8000c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0a:	bf00      	nop
 8000c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c0e:	bc08      	pop	{r3}
 8000c10:	469e      	mov	lr, r3
 8000c12:	4770      	bx	lr

08000c14 <_fini>:
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	bf00      	nop
 8000c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1a:	bc08      	pop	{r3}
 8000c1c:	469e      	mov	lr, r3
 8000c1e:	4770      	bx	lr
