
NVIC_examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a8c  08000a8c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000a8c  08000a8c  00010a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000a90  08000a90  00010a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000020  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000034  20000034  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000264c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000088b  00000000  00000000  00022690  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001d8  00000000  00000000  00022f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  000230f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000119f  00000000  00000000  00023258  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000d8e  00000000  00000000  000243f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00025185  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000004e0  00000000  00000000  00025204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000a74 	.word	0x08000a74

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08000a74 	.word	0x08000a74

080001ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	da0b      	bge.n	8000218 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000200:	490d      	ldr	r1, [pc, #52]	; (8000238 <NVIC_SetPriority+0x4c>)
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 030f 	and.w	r3, r3, #15
 8000208:	3b04      	subs	r3, #4
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000216:	e009      	b.n	800022c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000218:	4908      	ldr	r1, [pc, #32]	; (800023c <NVIC_SetPriority+0x50>)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	e000ed00 	.word	0xe000ed00
 800023c:	e000e100 	.word	0xe000e100

08000240 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000250:	d301      	bcc.n	8000256 <SysTick_Config+0x16>
 8000252:	2301      	movs	r3, #1
 8000254:	e00f      	b.n	8000276 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <SysTick_Config+0x40>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3b01      	subs	r3, #1
 800025c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800025e:	210f      	movs	r1, #15
 8000260:	f04f 30ff 	mov.w	r0, #4294967295
 8000264:	f7ff ffc2 	bl	80001ec <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <SysTick_Config+0x40>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <SysTick_Config+0x40>)
 8000270:	2207      	movs	r2, #7
 8000272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	e000e010 	.word	0xe000e010

08000284 <SysTick_Init>:
#include "SysTick.h"


void SysTick_Init(void)

{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	uint32_t returnCode;

	/*Update clock configuration*/
	SystemCoreClockUpdate();
 800028a:	f000 fad7 	bl	800083c <SystemCoreClockUpdate>

	/*check clock configuration*/
	if(SystemCoreClock != (uint32_t) 180000000)
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <SysTick_Init+0x44>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <SysTick_Init+0x48>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d000      	beq.n	800029a <SysTick_Init+0x16>
	{
		/*clock configuration is not OK*/
		while(1);
 8000298:	e7fe      	b.n	8000298 <SysTick_Init+0x14>
		/*clock configuration is OK*/
		//SysTick_IncrementTicks_cb();
	}

	/* Configure SysTick to generate an interrupt every millisecond*/
	returnCode = SysTick_Config(SystemCoreClock / 1000);
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <SysTick_Init+0x44>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <SysTick_Init+0x4c>)
 80002a0:	fba2 2303 	umull	r2, r3, r2, r3
 80002a4:	099b      	lsrs	r3, r3, #6
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffca 	bl	8000240 <SysTick_Config>
 80002ac:	6078      	str	r0, [r7, #4]

	/*check return code for errors */

	if(returnCode != 0)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d000      	beq.n	80002b6 <SysTick_Init+0x32>
	{
		/*SysTick Configuration failed*/
		while (1);
 80002b4:	e7fe      	b.n	80002b4 <SysTick_Init+0x30>
	{
		/*SysTick Configuration OK*/
		//SysTick_IncrementTicks_cb();
	}

	NVIC_SetPriority(SysTick_IRQn , 0);
 80002b6:	2100      	movs	r1, #0
 80002b8:	f04f 30ff 	mov.w	r0, #4294967295
 80002bc:	f7ff ff96 	bl	80001ec <NVIC_SetPriority>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000000 	.word	0x20000000
 80002cc:	0aba9500 	.word	0x0aba9500
 80002d0:	10624dd3 	.word	0x10624dd3

080002d4 <SysTick_Delay>:
	return (SysTickCounter);

}

void SysTick_Delay (uint32_t wait_time_ms)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]

	/*store start tick*/
	uint32_t startTick = SysTickCounter;
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <SysTick_Delay+0x2c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	60fb      	str	r3, [r7, #12]
	//SysTickCounter ++;
	/*Loop until timeout*/
	while((SysTickCounter - startTick) < wait_time_ms);
 80002e2:	bf00      	nop
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <SysTick_Delay+0x2c>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	1ad2      	subs	r2, r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d3f8      	bcc.n	80002e4 <SysTick_Delay+0x10>

}
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000030 	.word	0x20000030

08000304 <EXTI_Init_PB>:


#include "exti.h"

void EXTI_Init_PB()
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0

	/*Enable SYSCFG clock*/

	RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 8000308:	4a13      	ldr	r2, [pc, #76]	; (8000358 <EXTI_Init_PB+0x54>)
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <EXTI_Init_PB+0x54>)
 800030c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800030e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000312:	6453      	str	r3, [r2, #68]	; 0x44

	/* Map PA0 to EXT0*/

	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <EXTI_Init_PB+0x58>)
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <EXTI_Init_PB+0x58>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	6093      	str	r3, [r2, #8]

	/* Enable rising edge trigger*/

	EXTI->RTSR |= EXTI_RTSR_TR0;
 800031c:	4a10      	ldr	r2, [pc, #64]	; (8000360 <EXTI_Init_PB+0x5c>)
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <EXTI_Init_PB+0x5c>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6093      	str	r3, [r2, #8]

	/* Disable falling edge trigger*/

	EXTI->FTSR &= ~(EXTI_FTSR_TR0);
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <EXTI_Init_PB+0x5c>)
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <EXTI_Init_PB+0x5c>)
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	f023 0301 	bic.w	r3, r3, #1
 8000332:	60d3      	str	r3, [r2, #12]

	/*Enable interrupt line*/

	EXTI->IMR |= EXTI_IMR_MR0;
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <EXTI_Init_PB+0x5c>)
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <EXTI_Init_PB+0x5c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6013      	str	r3, [r2, #0]

	/*Enable event line*/

	EXTI->EMR |= EXTI_EMR_MR0;
 8000340:	4a07      	ldr	r2, [pc, #28]	; (8000360 <EXTI_Init_PB+0x5c>)
 8000342:	4b07      	ldr	r3, [pc, #28]	; (8000360 <EXTI_Init_PB+0x5c>)
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	6053      	str	r3, [r2, #4]




}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40013800 	.word	0x40013800
 8000360:	40013c00 	.word	0x40013c00

08000364 <GPIO_init_LED>:
 */

#include "gpio.h"

void GPIO_init_LED(Led_Type led)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
	switch (led)
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d002      	beq.n	800037a <GPIO_init_LED+0x16>
 8000374:	2b02      	cmp	r3, #2
 8000376:	d033      	beq.n	80003e0 <GPIO_init_LED+0x7c>
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR14);


			break;
	default:
		break;
 8000378:	e065      	b.n	8000446 <GPIO_init_LED+0xe2>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 800037a:	4a36      	ldr	r2, [pc, #216]	; (8000454 <GPIO_init_LED+0xf0>)
 800037c:	4b35      	ldr	r3, [pc, #212]	; (8000454 <GPIO_init_LED+0xf0>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOG->MODER |= GPIO_MODER_MODER13_0;
 8000386:	4a34      	ldr	r2, [pc, #208]	; (8000458 <GPIO_init_LED+0xf4>)
 8000388:	4b33      	ldr	r3, [pc, #204]	; (8000458 <GPIO_init_LED+0xf4>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000390:	6013      	str	r3, [r2, #0]
		GPIOG->OTYPER &= ~(GPIO_OTYPER_OT_13);
 8000392:	4a31      	ldr	r2, [pc, #196]	; (8000458 <GPIO_init_LED+0xf4>)
 8000394:	4b30      	ldr	r3, [pc, #192]	; (8000458 <GPIO_init_LED+0xf4>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800039c:	6053      	str	r3, [r2, #4]
		GPIOG->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR13_0 | GPIO_OSPEEDER_OSPEEDR13_1);
 800039e:	4a2e      	ldr	r2, [pc, #184]	; (8000458 <GPIO_init_LED+0xf4>)
 80003a0:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <GPIO_init_LED+0xf4>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80003a8:	6093      	str	r3, [r2, #8]
		RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 80003aa:	4a2a      	ldr	r2, [pc, #168]	; (8000454 <GPIO_init_LED+0xf0>)
 80003ac:	4b29      	ldr	r3, [pc, #164]	; (8000454 <GPIO_init_LED+0xf0>)
 80003ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
 80003b6:	4a29      	ldr	r2, [pc, #164]	; (800045c <GPIO_init_LED+0xf8>)
 80003b8:	4b28      	ldr	r3, [pc, #160]	; (800045c <GPIO_init_LED+0xf8>)
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6213      	str	r3, [r2, #32]
		while ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 80003c2:	bf00      	nop
 80003c4:	4b25      	ldr	r3, [pc, #148]	; (800045c <GPIO_init_LED+0xf8>)
 80003c6:	6a1b      	ldr	r3, [r3, #32]
 80003c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003d0:	d1f8      	bne.n	80003c4 <GPIO_init_LED+0x60>
		GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR13);
 80003d2:	4a21      	ldr	r2, [pc, #132]	; (8000458 <GPIO_init_LED+0xf4>)
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <GPIO_init_LED+0xf4>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80003dc:	60d3      	str	r3, [r2, #12]
		break;
 80003de:	e032      	b.n	8000446 <GPIO_init_LED+0xe2>
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 80003e0:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <GPIO_init_LED+0xf0>)
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <GPIO_init_LED+0xf0>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG->MODER |= GPIO_MODER_MODER14_0;
 80003ec:	4a1a      	ldr	r2, [pc, #104]	; (8000458 <GPIO_init_LED+0xf4>)
 80003ee:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <GPIO_init_LED+0xf4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f6:	6013      	str	r3, [r2, #0]
			GPIOG->OTYPER &= ~(GPIO_OTYPER_OT_14);
 80003f8:	4a17      	ldr	r2, [pc, #92]	; (8000458 <GPIO_init_LED+0xf4>)
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <GPIO_init_LED+0xf4>)
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000402:	6053      	str	r3, [r2, #4]
			GPIOG->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR14_0 | GPIO_OSPEEDER_OSPEEDR14_1);
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <GPIO_init_LED+0xf4>)
 8000406:	4b14      	ldr	r3, [pc, #80]	; (8000458 <GPIO_init_LED+0xf4>)
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800040e:	6093      	str	r3, [r2, #8]
			RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 8000410:	4a10      	ldr	r2, [pc, #64]	; (8000454 <GPIO_init_LED+0xf0>)
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <GPIO_init_LED+0xf0>)
 8000414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041a:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
 800041c:	4a0f      	ldr	r2, [pc, #60]	; (800045c <GPIO_init_LED+0xf8>)
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <GPIO_init_LED+0xf8>)
 8000420:	6a1b      	ldr	r3, [r3, #32]
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6213      	str	r3, [r2, #32]
			while ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 8000428:	bf00      	nop
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <GPIO_init_LED+0xf8>)
 800042c:	6a1b      	ldr	r3, [r3, #32]
 800042e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000436:	d1f8      	bne.n	800042a <GPIO_init_LED+0xc6>
			GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPDR14);
 8000438:	4a07      	ldr	r2, [pc, #28]	; (8000458 <GPIO_init_LED+0xf4>)
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <GPIO_init_LED+0xf4>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000442:	60d3      	str	r3, [r2, #12]
			break;
 8000444:	bf00      	nop
	}


}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40023800 	.word	0x40023800
 8000458:	40021800 	.word	0x40021800
 800045c:	40013800 	.word	0x40013800

08000460 <GPIO_TurnON_LED>:
void GPIO_TurnON_LED(Led_Type led)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
	switch (led)
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d00e      	beq.n	800048e <GPIO_TurnON_LED+0x2e>
 8000470:	2b02      	cmp	r3, #2
 8000472:	d007      	beq.n	8000484 <GPIO_TurnON_LED+0x24>
 8000474:	2b00      	cmp	r3, #0
 8000476:	d000      	beq.n	800047a <GPIO_TurnON_LED+0x1a>
	case EVAL_GREEN_LED_BITBAND:
				GREEN_LED_BITBAND = 1;
				break;

	default:
		break;
 8000478:	e00d      	b.n	8000496 <GPIO_TurnON_LED+0x36>
		GPIOG->BSRRL = GPIO_BSRR_BS_13;
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <GPIO_TurnON_LED+0x44>)
 800047c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000480:	831a      	strh	r2, [r3, #24]
		break;
 8000482:	e008      	b.n	8000496 <GPIO_TurnON_LED+0x36>
		GPIOG->BSRRL = GPIO_BSRR_BS_14;
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <GPIO_TurnON_LED+0x44>)
 8000486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800048a:	831a      	strh	r2, [r3, #24]
		break;
 800048c:	e003      	b.n	8000496 <GPIO_TurnON_LED+0x36>
				GREEN_LED_BITBAND = 1;
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <GPIO_TurnON_LED+0x48>)
 8000490:	2201      	movs	r2, #1
 8000492:	601a      	str	r2, [r3, #0]
				break;
 8000494:	bf00      	nop

	}

}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40021800 	.word	0x40021800
 80004a8:	424302b4 	.word	0x424302b4

080004ac <GPIO_TurnOFF_LED>:
void GPIO_TurnOFF_LED(Led_Type led)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	switch (led)
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d00e      	beq.n	80004da <GPIO_TurnOFF_LED+0x2e>
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d007      	beq.n	80004d0 <GPIO_TurnOFF_LED+0x24>
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d000      	beq.n	80004c6 <GPIO_TurnOFF_LED+0x1a>
		case EVAL_GREEN_LED_BITBAND:
			GREEN_LED_BITBAND = 0;
			break;

		default:
			break;
 80004c4:	e00d      	b.n	80004e2 <GPIO_TurnOFF_LED+0x36>
			GPIOG->BSRRH = GPIO_BSRR_BS_13;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <GPIO_TurnOFF_LED+0x44>)
 80004c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004cc:	835a      	strh	r2, [r3, #26]
			break;
 80004ce:	e008      	b.n	80004e2 <GPIO_TurnOFF_LED+0x36>
			GPIOG->BSRRH = GPIO_BSRR_BS_14;
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <GPIO_TurnOFF_LED+0x44>)
 80004d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004d6:	835a      	strh	r2, [r3, #26]
			break;
 80004d8:	e003      	b.n	80004e2 <GPIO_TurnOFF_LED+0x36>
			GREEN_LED_BITBAND = 0;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <GPIO_TurnOFF_LED+0x48>)
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
			break;
 80004e0:	bf00      	nop

		}

}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021800 	.word	0x40021800
 80004f4:	424302b4 	.word	0x424302b4

080004f8 <GPIO_Init_PB>:

void GPIO_Init_PB()
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

	/*Enable post PIOA clock in RCC*/

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80004fc:	4a0b      	ldr	r2, [pc, #44]	; (800052c <GPIO_Init_PB+0x34>)
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <GPIO_Init_PB+0x34>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6313      	str	r3, [r2, #48]	; 0x30

	/*Select input mode for PA0*/

	GPIOA->MODER &= ~(GPIO_MODER_MODER0);
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <GPIO_Init_PB+0x38>)
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <GPIO_Init_PB+0x38>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f023 0303 	bic.w	r3, r3, #3
 8000512:	6013      	str	r3, [r2, #0]

	/*Select no pull up because it has external pull down*/

	GPIOA->PUPDR |= ~(GPIO_PUPDR_PUPDR0);
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <GPIO_Init_PB+0x38>)
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <GPIO_Init_PB+0x38>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	f063 0303 	orn	r3, r3, #3
 800051e:	60d3      	str	r3, [r2, #12]



}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800
 8000530:	40020000 	.word	0x40020000

08000534 <NVIC_SetPriorityGrouping>:
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f003 0307 	and.w	r3, r3, #7
 8000542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <NVIC_SetPriorityGrouping+0x44>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000550:	4013      	ands	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 800055c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000566:	4a04      	ldr	r2, [pc, #16]	; (8000578 <NVIC_SetPriorityGrouping+0x44>)
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	60d3      	str	r3, [r2, #12]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <NVIC_EnableIRQ>:
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000586:	4909      	ldr	r1, [pc, #36]	; (80005ac <NVIC_EnableIRQ+0x30>)
 8000588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058c:	095b      	lsrs	r3, r3, #5
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	f002 021f 	and.w	r2, r2, #31
 8000594:	2001      	movs	r0, #1
 8000596:	fa00 f202 	lsl.w	r2, r0, r2
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000e100 	.word	0xe000e100

080005b0 <NVIC_SetPriority>:
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	6039      	str	r1, [r7, #0]
 80005ba:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80005bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	da0b      	bge.n	80005dc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80005c4:	490d      	ldr	r1, [pc, #52]	; (80005fc <NVIC_SetPriority+0x4c>)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 030f 	and.w	r3, r3, #15
 80005cc:	3b04      	subs	r3, #4
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	0112      	lsls	r2, r2, #4
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	440b      	add	r3, r1
 80005d8:	761a      	strb	r2, [r3, #24]
}
 80005da:	e009      	b.n	80005f0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80005dc:	4908      	ldr	r1, [pc, #32]	; (8000600 <NVIC_SetPriority+0x50>)
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00
 8000600:	e000e100 	.word	0xe000e100

08000604 <NVIC_Init>:


#include "nvic.h"

void NVIC_Init()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	/* Set Priority group to 3
	 * bits[3:0] are the sub-priority
	 * bits[7:4] are the pre-empt priority (0-15)
	 */

	NVIC_SetPriorityGrouping(3);
 8000608:	2003      	movs	r0, #3
 800060a:	f7ff ff93 	bl	8000534 <NVIC_SetPriorityGrouping>


	/*Set priority levels*/

	NVIC_SetPriority(SysTick_IRQn , 0);
 800060e:	2100      	movs	r1, #0
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f7ff ffcc 	bl	80005b0 <NVIC_SetPriority>
	NVIC_SetPriority(EXTI0_IRQn , 1);
 8000618:	2101      	movs	r1, #1
 800061a:	2006      	movs	r0, #6
 800061c:	f7ff ffc8 	bl	80005b0 <NVIC_SetPriority>


	/*Enable interrupts at NVIC*/

	NVIC_EnableIRQ(EXTI0_IRQn);
 8000620:	2006      	movs	r0, #6
 8000622:	f7ff ffab 	bl	800057c <NVIC_EnableIRQ>

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <main>:
#include"nvic.h"


int main (void)

{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0

	SysTick_Init();
 800062e:	f7ff fe29 	bl	8000284 <SysTick_Init>
	GPIO_init_LED(EVAL_GREEN_LED);
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff fe96 	bl	8000364 <GPIO_init_LED>
	GPIO_init_LED(EVAL_RED_LED);
 8000638:	2002      	movs	r0, #2
 800063a:	f7ff fe93 	bl	8000364 <GPIO_init_LED>

	GPIO_Init_PB();
 800063e:	f7ff ff5b 	bl	80004f8 <GPIO_Init_PB>
	EXTI_Init_PB();
 8000642:	f7ff fe5f 	bl	8000304 <EXTI_Init_PB>
	NVIC_Init();
 8000646:	f7ff ffdd 	bl	8000604 <NVIC_Init>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800064a:	b662      	cpsie	i

	__enable_irq();

	/*Infinite loop*/

	while(1)
 800064c:	e7fe      	b.n	800064c <main+0x22>
	...

08000650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000650:	f8df d038 	ldr.w	sp, [pc, #56]	; 800068c <LoopFillZerobss+0x16>
  
  /*Disable interrupt (set PRIMASK)*/
  CPSID i
 8000654:	b672      	cpsid	i

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000656:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000658:	e003      	b.n	8000662 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 800065c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800065e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000660:	3104      	adds	r1, #4

08000662 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000666:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000668:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800066a:	d3f6      	bcc.n	800065a <CopyDataInit>
  ldr  r2, =_sbss
 800066c:	4a0b      	ldr	r2, [pc, #44]	; (800069c <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 800066e:	e002      	b.n	8000676 <LoopFillZerobss>

08000670 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000670:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000672:	f842 3b04 	str.w	r3, [r2], #4

08000676 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8000678:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800067a:	d3f9      	bcc.n	8000670 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800067c:	f000 f8a8 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000680:	f000 f9d4 	bl	8000a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000684:	f7ff ffd1 	bl	800062a <main>
  bx  lr    
 8000688:	4770      	bx	lr
 800068a:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800068c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000690:	08000a94 	.word	0x08000a94
  ldr  r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000698:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800069c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80006a0:	20000034 	.word	0x20000034

080006a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC_IRQHandler>
	...

080006a8 <NVIC_SetPendingIRQ>:
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 80006b2:	4909      	ldr	r1, [pc, #36]	; (80006d8 <NVIC_SetPendingIRQ+0x30>)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	095b      	lsrs	r3, r3, #5
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	f002 021f 	and.w	r2, r2, #31
 80006c0:	2001      	movs	r0, #1
 80006c2:	fa00 f202 	lsl.w	r2, r0, r2
 80006c6:	3340      	adds	r3, #64	; 0x40
 80006c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100

080006dc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */

	++SysTickCounter;
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <SysTick_Handler+0x18>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	4a03      	ldr	r2, [pc, #12]	; (8000744 <SysTick_Handler+0x18>)
 8000738:	6013      	str	r3, [r2, #0]
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	20000030 	.word	0x20000030

08000748 <EXTI0_IRQHandler>:
{
}*/


void EXTI0_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

	/* Turn on green led */

	GPIO_TurnON_LED(EVAL_GREEN_LED);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff fe87 	bl	8000460 <GPIO_TurnON_LED>

	/*wait one second*/

	SysTick_Delay(1000);
 8000752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000756:	f7ff fdbd 	bl	80002d4 <SysTick_Delay>

	/*Turn off green led*/

	GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fea6 	bl	80004ac <GPIO_TurnOFF_LED>

	/*wait one second*/

	SysTick_Delay(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f7ff fdb7 	bl	80002d4 <SysTick_Delay>

	/*clear pending bit*/

	EXTI->PR |= EXTI_PR_PR0;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <EXTI0_IRQHandler+0x30>)
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <EXTI0_IRQHandler+0x30>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6153      	str	r3, [r2, #20]



}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40013c00 	.word	0x40013c00

0800077c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

	GPIO_TurnOFF_LED(EVAL_GREEN_LED);
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff fe93 	bl	80004ac <GPIO_TurnOFF_LED>
	SysTick_Delay(500);
 8000786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078a:	f7ff fda3 	bl	80002d4 <SysTick_Delay>
	NVIC_SetPendingIRQ(RED_LED_ON_IRQ);
 800078e:	2008      	movs	r0, #8
 8000790:	f7ff ff8a 	bl	80006a8 <NVIC_SetPendingIRQ>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

	GPIO_TurnON_LED(EVAL_RED_LED);
 800079c:	2002      	movs	r0, #2
 800079e:	f7ff fe5f 	bl	8000460 <GPIO_TurnON_LED>
	SysTick_Delay(500);
 80007a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a6:	f7ff fd95 	bl	80002d4 <SysTick_Delay>
	NVIC_SetPendingIRQ(RED_LED_OFF_IRQ);
 80007aa:	2009      	movs	r0, #9
 80007ac:	f7ff ff7c 	bl	80006a8 <NVIC_SetPendingIRQ>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

	GPIO_TurnOFF_LED(EVAL_RED_LED);
 80007b8:	2002      	movs	r0, #2
 80007ba:	f7ff fe77 	bl	80004ac <GPIO_TurnOFF_LED>
	SysTick_Delay(500);
 80007be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c2:	f7ff fd87 	bl	80002d4 <SysTick_Delay>
	NVIC_SetPendingIRQ(GREEN_LED_ON_IRQ);
 80007c6:	2006      	movs	r0, #6
 80007c8:	f7ff ff6e 	bl	80006a8 <NVIC_SetPendingIRQ>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d4:	4a16      	ldr	r2, [pc, #88]	; (8000830 <SystemInit+0x60>)
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <SystemInit+0x60>)
 80007d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <SystemInit+0x64>)
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <SystemInit+0x64>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <SystemInit+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <SystemInit+0x64>)
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <SystemInit+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000804:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <SystemInit+0x64>)
 8000808:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <SystemInit+0x68>)
 800080a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800080c:	4a09      	ldr	r2, [pc, #36]	; (8000834 <SystemInit+0x64>)
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <SystemInit+0x64>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000816:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <SystemInit+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800081e:	f000 f889 	bl	8000934 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000822:	4b03      	ldr	r3, [pc, #12]	; (8000830 <SystemInit+0x60>)
 8000824:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000828:	609a      	str	r2, [r3, #8]
#endif
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00
 8000834:	40023800 	.word	0x40023800
 8000838:	24003010 	.word	0x24003010

0800083c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	2302      	movs	r3, #2
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	2302      	movs	r3, #2
 8000854:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <SystemCoreClockUpdate+0xe4>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f003 030c 	and.w	r3, r3, #12
 800085e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	2b04      	cmp	r3, #4
 8000864:	d007      	beq.n	8000876 <SystemCoreClockUpdate+0x3a>
 8000866:	2b08      	cmp	r3, #8
 8000868:	d009      	beq.n	800087e <SystemCoreClockUpdate+0x42>
 800086a:	2b00      	cmp	r3, #0
 800086c:	d13d      	bne.n	80008ea <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <SystemCoreClockUpdate+0xe8>)
 8000870:	4a2d      	ldr	r2, [pc, #180]	; (8000928 <SystemCoreClockUpdate+0xec>)
 8000872:	601a      	str	r2, [r3, #0]
      break;
 8000874:	e03d      	b.n	80008f2 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000876:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <SystemCoreClockUpdate+0xe8>)
 8000878:	4a2c      	ldr	r2, [pc, #176]	; (800092c <SystemCoreClockUpdate+0xf0>)
 800087a:	601a      	str	r2, [r3, #0]
      break;
 800087c:	e039      	b.n	80008f2 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <SystemCoreClockUpdate+0xe4>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	0d9b      	lsrs	r3, r3, #22
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800088a:	4b25      	ldr	r3, [pc, #148]	; (8000920 <SystemCoreClockUpdate+0xe4>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000892:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00c      	beq.n	80008b4 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800089a:	4a24      	ldr	r2, [pc, #144]	; (800092c <SystemCoreClockUpdate+0xf0>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <SystemCoreClockUpdate+0xe4>)
 80008a4:	6852      	ldr	r2, [r2, #4]
 80008a6:	0992      	lsrs	r2, r2, #6
 80008a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008ac:	fb02 f303 	mul.w	r3, r2, r3
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e00b      	b.n	80008cc <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008b4:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <SystemCoreClockUpdate+0xec>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008bc:	4a18      	ldr	r2, [pc, #96]	; (8000920 <SystemCoreClockUpdate+0xe4>)
 80008be:	6852      	ldr	r2, [r2, #4]
 80008c0:	0992      	lsrs	r2, r2, #6
 80008c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008c6:	fb02 f303 	mul.w	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <SystemCoreClockUpdate+0xe4>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	3301      	adds	r3, #1
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80008dc:	697a      	ldr	r2, [r7, #20]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e4:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <SystemCoreClockUpdate+0xe8>)
 80008e6:	6013      	str	r3, [r2, #0]
      break;
 80008e8:	e003      	b.n	80008f2 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <SystemCoreClockUpdate+0xe8>)
 80008ec:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <SystemCoreClockUpdate+0xec>)
 80008ee:	601a      	str	r2, [r3, #0]
      break;
 80008f0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <SystemCoreClockUpdate+0xe4>)
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	f003 030f 	and.w	r3, r3, #15
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <SystemCoreClockUpdate+0xf4>)
 80008fe:	5cd3      	ldrb	r3, [r2, r3]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <SystemCoreClockUpdate+0xe8>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	fa22 f303 	lsr.w	r3, r2, r3
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemCoreClockUpdate+0xe8>)
 8000910:	6013      	str	r3, [r2, #0]
}
 8000912:	bf00      	nop
 8000914:	371c      	adds	r7, #28
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	20000000 	.word	0x20000000
 8000928:	00f42400 	.word	0x00f42400
 800092c:	007a1200 	.word	0x007a1200
 8000930:	20000004 	.word	0x20000004

08000934 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000942:	4a36      	ldr	r2, [pc, #216]	; (8000a1c <SetSysClock+0xe8>)
 8000944:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <SetSysClock+0xe8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800094e:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <SetSysClock+0xe8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3301      	adds	r3, #1
 800095c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d103      	bne.n	800096c <SetSysClock+0x38>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800096a:	d1f0      	bne.n	800094e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <SetSysClock+0xe8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d002      	beq.n	800097e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000978:	2301      	movs	r3, #1
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	e001      	b.n	8000982 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d102      	bne.n	800098e <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <SetSysClock+0xe8>)
 800098a:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <SetSysClock+0xec>)
 800098c:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800098e:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <SetSysClock+0xe8>)
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <SetSysClock+0xe8>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800099a:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <SetSysClock+0xf0>)
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <SetSysClock+0xf0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a4:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80009a6:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <SetSysClock+0xe8>)
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <SetSysClock+0xe8>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80009ae:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <SetSysClock+0xe8>)
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <SetSysClock+0xe8>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b8:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80009ba:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <SetSysClock+0xe8>)
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <SetSysClock+0xe8>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80009c4:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <SetSysClock+0xe8>)
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <SetSysClock+0xe8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009d0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009d2:	bf00      	nop
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <SetSysClock+0xe8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0f9      	beq.n	80009d4 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <SetSysClock+0xf4>)
 80009e2:	f240 7205 	movw	r2, #1797	; 0x705
 80009e6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <SetSysClock+0xe8>)
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <SetSysClock+0xe8>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	f023 0303 	bic.w	r3, r3, #3
 80009f2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <SetSysClock+0xe8>)
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <SetSysClock+0xe8>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000a00:	bf00      	nop
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SetSysClock+0xe8>)
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	f003 030c 	and.w	r3, r3, #12
 8000a0a:	2b08      	cmp	r3, #8
 8000a0c:	d1f9      	bne.n	8000a02 <SetSysClock+0xce>
    {
    }
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	07405a08 	.word	0x07405a08
 8000a24:	40007000 	.word	0x40007000
 8000a28:	40023c00 	.word	0x40023c00

08000a2c <__libc_init_array>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	4e0d      	ldr	r6, [pc, #52]	; (8000a64 <__libc_init_array+0x38>)
 8000a30:	4c0d      	ldr	r4, [pc, #52]	; (8000a68 <__libc_init_array+0x3c>)
 8000a32:	1ba4      	subs	r4, r4, r6
 8000a34:	10a4      	asrs	r4, r4, #2
 8000a36:	2500      	movs	r5, #0
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	d109      	bne.n	8000a50 <__libc_init_array+0x24>
 8000a3c:	4e0b      	ldr	r6, [pc, #44]	; (8000a6c <__libc_init_array+0x40>)
 8000a3e:	4c0c      	ldr	r4, [pc, #48]	; (8000a70 <__libc_init_array+0x44>)
 8000a40:	f000 f818 	bl	8000a74 <_init>
 8000a44:	1ba4      	subs	r4, r4, r6
 8000a46:	10a4      	asrs	r4, r4, #2
 8000a48:	2500      	movs	r5, #0
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	d105      	bne.n	8000a5a <__libc_init_array+0x2e>
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a54:	4798      	blx	r3
 8000a56:	3501      	adds	r5, #1
 8000a58:	e7ee      	b.n	8000a38 <__libc_init_array+0xc>
 8000a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a5e:	4798      	blx	r3
 8000a60:	3501      	adds	r5, #1
 8000a62:	e7f2      	b.n	8000a4a <__libc_init_array+0x1e>
 8000a64:	08000a8c 	.word	0x08000a8c
 8000a68:	08000a8c 	.word	0x08000a8c
 8000a6c:	08000a8c 	.word	0x08000a8c
 8000a70:	08000a90 	.word	0x08000a90

08000a74 <_init>:
 8000a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a76:	bf00      	nop
 8000a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7a:	bc08      	pop	{r3}
 8000a7c:	469e      	mov	lr, r3
 8000a7e:	4770      	bx	lr

08000a80 <_fini>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	bf00      	nop
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr
